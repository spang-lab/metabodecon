# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
name: Slow-Example-Check
permissions: read-all
on: {
  push: {branches: [main, master]},
  pull_request: {branches: [main, master]}
}
jobs:
  Slow-Example-Check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
      fail-fast: false
      matrix:            # Examples with CPU (user + system) or elapsed time > 5s
        config:                                 #             user system elapsed
          - {os: windows-latest, r: 'release'}  # check_mdrb  0.05   0.05    9.33
          - {os: windows-latest, r: 'oldrel-4'} # check_mdrb     0   0.01    5.16
          - {os: ubuntu-latest,  r: 'oldrel-1'} # check_mdrb 0.283  0.837  15.525
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      RUN_SLOW_TESTS: "TRUE"
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          extra-repositories: https://spang-lab.r-universe.dev

      - name: Install MacOS System Dependencies
        uses: r-hub/actions/setup-r-sysreqs@v1
        with: { type: "minimal" }

      - name: Install Linux System Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update -y && sudo apt-get install -y libgsl0-dev

      - name: Set up R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with: {
          extra-packages: "any::rcmdcheck, mdrb=?ignore-before-r=4.2.0",
          needs: "check"
        }

      - name: Install package
        shell: Rscript {0}
        run: |
          devtools::install()

      - name: Check rustc and cargo versions
        shell: bash
        run: |
          echo "$(date '+%Y-%m-%d %H:%M:%S'): rustc --version"
          rustc --version
          echo "$(date '+%Y-%m-%d %H:%M:%S'): cargo --version"
          cargo --version
          echo "$(date '+%Y-%m-%d %H:%M:%S'): done"


      - name: Check slow example
        shell: Rscript {0}
        run: |

          catf <- function(...) {
              now <- format(Sys.time(), "%Y-%m-%d %H:%M:%OS3: ")
              msg <- sprintf(...)
              cat(now, msg, "\n", sep = "")
          }

          if (TRUE) {
            catf("Loading metabodecon")
            x <- system.time(library(metabodecon))
            catf("Done (%ss)", x[[3]])
          }

          if (TRUE) {
            catf("Checking if on Windows")
            x <- system.time(on_windows <- pkgbuild:::is_windows())
            catf("on_windows: %s (%ss)", on_windows, x[[3]])
          }

          if (on_windows) {
              catf("Checking for Rtools")
              x <- system.time(rtools_available <- pkgbuild:::has_rtools(debug = TRUE))
              catf("Rtools available: %s (%ss)", rtools_available, x[[3]])
          }

          if (!on_windows) {
              catf("Checking for compiler")
              x <- system.time(has_compiler <- pkgbuild:::has_compiler(debug = TRUE))
              catf("Compiler available: %s (%ss)", has_compiler, x[[3]])
          }

          if (TRUE) {
              catf("Checking whether buildtools.check is defined")
              x <- system.time(buildtools.check <- getOption("buildtools.check", NULL))
              catf("buildtools.check defined: %s (%ss)", is.function(buildtools.check), x[[3]])
          }

          if (is.function(buildtools.check)) {
              catf('Calling `buildtools.check("Building R package from source")` ')
              x <- system.time(check.result <- buildtools.check("Building R package from source"))
              catf("check.result: %s (%ss)", check.result, x[[3]])
          }

          if (TRUE) {
              catf("Calling slow example: `example(check_mdrb)`")
              x <- system.time(example(check_mdrb))
              catf("Done (%ss)", x[[3]])
          }
