[{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"GNU GENERAL PUBLIC LICENSE","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU GENERAL PUBLIC LICENSE","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU GENERAL PUBLIC LICENSE","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU GENERAL PUBLIC LICENSE","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU GENERAL PUBLIC LICENSE","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU GENERAL PUBLIC LICENSE","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU GENERAL PUBLIC LICENSE","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU GENERAL PUBLIC LICENSE","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU GENERAL PUBLIC LICENSE","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU GENERAL PUBLIC LICENSE","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU GENERAL PUBLIC LICENSE","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU GENERAL PUBLIC LICENSE","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU GENERAL PUBLIC LICENSE","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU GENERAL PUBLIC LICENSE","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU GENERAL PUBLIC LICENSE","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU GENERAL PUBLIC LICENSE","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU GENERAL PUBLIC LICENSE","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://spang-lab.github.io/metabodecon/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU GENERAL PUBLIC LICENSE","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":[]},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-13-merge-into-main","dir":"","previous_headings":"v1.2.0","what":"FEATURE-13: Merge into main","title":"Open","text":"Fix R CMD Check findings. Merge branch v1.2.0 main.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-10-resubmit-to-cran","dir":"","previous_headings":"v1.2.0","what":"CRAN-10: Resubmit to CRAN","title":"Open","text":"Resubmit CRAN.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"doc-2-improve-docs","dir":"","previous_headings":"v1.2.0","what":"DOC-2: Improve docs","title":"Open","text":"Add author descriptions function Add lifecycle badges exported function Ensure exported function used least vignette Remove unused functions Improve Get_Started adding nicer plots Write Deconvolution_Details vignette Write Alignment_Details vignette","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"doc-3-write-paper","dir":"","previous_headings":"v1.2.0","what":"DOC-3: Write paper","title":"Open","text":"Reformat vignettes paper send Wolfram proofreading.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-8-warn-user-if-peaks-are-found-in-sfr","dir":"","previous_headings":"v1.3.x","what":"FEATURE-8: Warn user if peaks are found in SFR","title":"Open","text":"delta small (e.g. 1), peaks SFR might filtered . Either implement warn user (strong indication delta chosen small).","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-9-improve-mse_normed-calculation","dir":"","previous_headings":"v1.3.x","what":"REFACTOR-9: Improve mse_normed calculation","title":"Open","text":"function add_return_list: Make following part faster (remove completely): s <- sapply(x, function(x_i) sum(abs(* (lambda / (lambda^2 + (x_i - w)^2))))) # takes approx. 2.2 seconds urine_1 Return mse_normed_raw addition mse_normed (calculated based y <- spec$y_smooth). mse_normed_raw based y <- spec$y_raw.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-10-negative-values-for-estimated-a","dir":"","previous_headings":"v1.3.x","what":"CHECK-10: Negative values for estimated A","title":"Open","text":"Check negative values estimated lorentz curve area .","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-19-make-sfr-and-ws-defaults-dynamic","dir":"","previous_headings":"v1.3.x","what":"FEATURE-19: make SFR and WS defaults dynamic","title":"Open","text":"Replace default values wshw = 0.1527692 sfr = c(11.44494, -1.8828) generate_lorentz_curves() wshw = \"auto\" sfr = \"auto\", calculated follows: c(11.44494, -1.8828) part ppm range, use values, otherwise calculate wshw = 0.01 * width(cs) (0.01 round(0.007629452, 2) 0.007629452 equals 0.1527692 / 20.0236144338963 width default WSHW dividided width urine_1 spectrum. .e., new calculation give approximately proportion spectrum width default value.) sfr = max(cs) - c(1/6, 5/6) * width(cs)","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-10-implement-deconvolute_spectra","dir":"","previous_headings":"v1.4.0","what":"FEATURE-10: Implement deconvolute_spectra","title":"Open","text":"Implement deconvolute_spectra() deconvolute_spectrum() successors deconvolute_ispec() deconvolute_ispecs(). particular : Accept spectrum objects input (returned read_spectra). See FEATURE-9. Use correct SFR calculation described CHECK-2. Uses correct water signal calculation described CHECK-3. Use 1-based indexing data points described CHECK-4. Remove scale factor scaled data point numbers described CHECK-4. Remove negative values consistent way, described CHECK-5","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"infra-1-create-issue-for-the-following-topics","dir":"","previous_headings":"v1.4.0","what":"INFRA-1: Create issue for the following topics","title":"Open","text":"Write small wrapper generate store aligned SI matrix Check refactor integral calculations Check refactor mse calculations Improve prarp tests. peak ratio calculated nCorrectlyIdentifiedPeaks / (nPeaks + nFalselyDetectedPeaks) Implement Max’ parameter approximation algorithms calc_A, calc_lambda calc_w. Add testcase 100 iterations Add testcase one big peak 0.000 ppm (’s unclear https://github.com/spang-lab/metabodecon/blob/v1.2.0/R/21_decon_helpers.R#L315 checks w[] == 0). Check special handling cases [] == 0 lambda[] == 0 parameter approximaton. Max analyzed concluded checks necessary. though: copy paste artifacts w[] == 0 check (wrong). Show prarp plot_spectrum() Show peak scores plot_spectrum()","code":""},{"path":[]},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-1-use-of-dtypp-in-load_spectrum","dir":"","previous_headings":"CHECK","what":"CHECK-1: Use of DTYPP in load_spectrum","title":"Open","text":"function deconvolution MetaboDecon1D_deconvolution.R:121 extracted version read_1r_file, y values read follows: Bruker_NMR_Data_Formats.pdf says: processing status parameter DTYPP defines data values stored. DTYPP 0 (“int”), stored value represents mantissa data point value, processing status parameter NC_proc exponent. case data points share exponent. […] format given parameter DTYPP, byte ordering given parameter BYTORDP, may read processing status parameter file procs. e.., read y Note: ’ve checked urine/urine_1/10/pdata/10/1r example file. ncproc == -2, .e. using described implementation, get y <- mantissa * (2 ^ (-2)) == y <- mantissa * 0.25, .e. right now values use 4 times larger . guess ’s end world, signals get scaled anyway. useful info Bruker_NMR_Data_Formats.pdf: raw data files fid ser contain one dimensional multi-dimensional acquired data, respectively. consist sequence acquired data point values binary format. acquisition status parameter DTYPA defines, data values stored. DTYPA “int” stored value represents mantissa data point value, acquisition parameter NC exponent. data points share case exponent. DTYPA “double”, data points stored double precision 64 bit floating number, parameter NC used. Note: also images Bruker_NMR_Data_Formats.pdf explaining interpret 64 bit float numbers. 2024/06/28: Checked now traced issue FEATURE-9.","code":"int_type <- as.numeric(sub(\"\\\\D+\", \"\", procs[startsWith(procs, \"##$DTYPP=\")])) int_size <- if (int_type == 0) 4 else 8 path_1r <- file.path(path, expno, \"pdata\", procno, \"1r\") spec_stream <- file(path_1r, \"rb\") on.exit(close(spec_stream), add = TRUE) y <- readBin(    spec_stream,    what = \"int\",    size = int_size,    n = n,    signed = TRUE,    endian = \"little\" ) path_1r <- file.path(path, expno, \"pdata\", procno, \"1r\") spec_stream <- file(path_1r, \"rb\") on.exit(close(spec_stream), add = TRUE) dtypp <- as.numeric(sub(\"\\\\D+\", \"\", procs[startsWith(procs, \"##$DTYPP=\")])) ncproc <- as.numeric(strsplit(procs[startsWith(procs, \"##$NC_proc=\")], \"=\")[[1]][2]) bytordp <- as.numeric(strsplit(procs[startsWith(procs, \"##$BYTORDP\")], \"=\")[[1]][2]) if (dtypp == 0) {    mantissa <- readBin(       spec_stream,       what = \"int\",       size = 4,       n = n,       endian = if (bytordp == 0) \"little\" else \"big\",       signed = TRUE # this needs to be verified as well    )    y <- mantissa * (2 ^ ncproc) } else {    stop(\"Not yet implemented\") }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-2-signal-free-region-sfr-calculation","dir":"","previous_headings":"CHECK","what":"CHECK-2: Signal free region (SFR) calculation","title":"Open","text":"function deconvolution file MetaboDecon1D.R, signal free region border data points calculated follows: versions contain following two errors: Error 1: spectrum$ppm_nstep used instead spectrum$ppm_step. ’s really important, causes slight shift border towards max value, number data points left (right) border stays (except edge case border falls exactly datapoint). Error 2: + 1 (spectrum$n + 1) wrong. - 1. causes signal free border shifted two points left. Example code demonstrate error: ’s big deal 100000 data points examples whether exclude e.g. 20500 20502 super important, user make precise estimate anyways based shown plot, makes code really confusing understand. correct method converting ppm dp (sfrl_ppm - min(ppm)) / ppm_step done function ppm_to_dp 00_util.R. Closed v1.2 correct implementation ppm_to_dp 00_util.R. However, generate_lorentz_curves() continue use wrong calculation stay backwards compatible. new method used successor function deconvolute_spectra(), tracked FEATURE-10","code":"# Calculate signal free region signal_free_region_left  <- (spectrum_length+1)-((ppm_highest_value-signal_free_region[1])/(ppm_range/spectrum_length)) signal_free_region_right <- (spectrum_length+1)-((ppm_highest_value-signal_free_region[2])/(ppm_range/spectrum_length)) dp <-  c(7,   6,   5,   4,   3,    2,    1,    0   ) ppm <- c(4.7, 3.4, 2.1, 0.8, -0.5, -1.8, -3.1, -4.4) sfrl_ppm <- 2.0 # i.e. 3 points left n <- length(dp) # 8 (n) data points, i.e. 7 (n - 1) intervals of size 1.3 in between ppm_step <- (max(ppm) - min(ppm)) / (n - 1) # 1.3 ppm_nstep <- (max(ppm) - min(ppm)) / n # 1.11 sfrl_dp <- (n + 1) - (max(ppm) - sfrl_ppm) / ppm_nstep # 8 - (4.7 - 2.0) / 1.11  ==  8 - 2.37  ==  6.63  ==> 1 point left sfrl_dp_without_error_1 <- sfrl_dp <- (n + 1) - (max(ppm) - sfrl_ppm) / ppm_step # 8 - (4.7 - 2.0) / 1.3  ==  8 - 2.08  ==  6.92  ==> 1 point left sfrl_dp_correct <- sfrl_dp <- (n - 1) - (max(ppm) - sfrl_ppm) / ppm_step # 6 - (4.7 - 2.0) / 1.3  ==  6 - 2.08  ==  4.92  ==> 3 point left"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-3-water-signal-calculation","dir":"","previous_headings":"CHECK","what":"CHECK-3: Water signal calculation","title":"Open","text":"function deconvolution file MetaboDecon1D_deconvolution.R, water signal border data points calculated follows: wrong, following two reasons: count datapoints 0 (n - 1), .e. taking length(spectrum_x)/2 incorrect. (length(spectrum_x) - 1)/2 instead. reason can easily seen example code . Taking spectrum_x_ppm[length(spectrum_x_ppm)/2] middle ppm value works, length(spectrum_x_ppm)/2 integer, .e. case even number data points. soon odd number data points length(spectrum_x_ppm)/2 float. E.g. 5 data points, 2.5 calling spectrum_x_ppm[2.5] give wrong result. Example code [!IMPORTANT] Check result: fixed function deconvolute_spectra FEATURE-10.","code":"# Remove water signal water_signal_position <- length(spectrum_x)/2 water_signal_position_ppm <- spectrum_x_ppm[length(spectrum_x_ppm)/2] # Recalculate ppm into data points range_water_signal<- range_water_signal_ppm/(ppm_range/spectrum_length) water_signal_left <- water_signal_position - range_water_signal water_signal_right <- water_signal_position + range_water_signal dp <-  c(6,   5,   4,   3,    2,    1,    0  ) # median and mean is 3 ppm <- c(4.7, 3.4, 2.1, 0.8, -0.5, -1.8, -3.1) # median and mean is 0.8 n <- length(dp) # 7  # Current wrong code ws_dp <- n/2 # 3.5 ws_ppm <- ppm[ws_dp] # error  # Correct code ws_dp <- (n - 1)/2 # 3 ws_ppm <- (max(ppm) + min(ppm)) / 2 # 0.8 and also works for odd ((n - 1) / 2)"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-4-data-point-format","dir":"","previous_headings":"CHECK","what":"CHECK-4: Data point format","title":"Open","text":"count data points starting 0 instead 1? makes programming R complicated, R starts counting 1. use “scaled data points” x values? ’s unintuitive (far can see) unnecessary. show large ppm values left low values right? [!IMPORTANT] Check result: Discussion Wolfram lead following conclusions: Reason MetaboDecon starts counting 0 clear. Probably Martina C python background comfortable 0-based indexing. generate_lorentz_curves keep 0-based indexing stay backwards compatible. deconvolute_spectra switch 1-based indexing. Tracked FEATURE-10. Intention prevent rounding errors, far can see ’s necessary. deconvolute_spectra completely remove scale factor scaled data point numbers. Tracked FEATURE-10. ’s general convention NMR spectroscopy stems fact early days NMR frequency kept contant magnetic field changed instead. keep way spectra looked like, frequency shown high low values. keep convention.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-5-signal-preprocessing","dir":"","previous_headings":"CHECK","what":"CHECK-5: Signal preprocessing","title":"Open","text":"ToSc: WS: check zeros. , use min(spectrum$y). Negatives: leave ","code":"# Remove water signal for (i in ws$right_dp:ws$left_dp) {    spectrum$y[i] <- 0.00000001 # <--- why not zero or min(spectrum$y)? }  # Remove negative values of spectrum by Saving the absolut values for (i in 1:length(spectrum$y)) {    spectrum$y[i] <- abs(spectrum$y[i]) # # <--- why abs instead of zero or min(spectrum$y)? }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-6-negative-value-removal","dir":"","previous_headings":"CHECK","what":"CHECK-6: Negative value removal","title":"Open","text":"“remove negative values” using abs instead setting zero minimum value spectrum? See R/MetaboDecon1D.R#1781 [!IMPORTANT] Check result: Discussed Wolfram decided doesn’t matter whether use abs negative removal something else, signals filtered anyways algorithm.","code":"# Remove negative values of spectrum by Saving the absolut values for(i in 1:length(spectrum_y)){    spectrum_y[i] <- abs(spectrum_y[i]) }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-7-peak-selection-procedure","dir":"","previous_headings":"CHECK","what":"CHECK-7: Peak selection procedure","title":"Open","text":"Currently peak selection procedure Requires two loops R, low Iterates 1:(m-2) instead 2:(m-1), wrong might cause miss one peak ’s end spectrum (almost certainly signal free region ’s bad). use vectorized operations correct indexing fix . [!IMPORTANT] Check result: Implemented function select_peaks_v2.","code":"# Peak selection procedure  # Calculate second derivative of spectrum second_derivative <- matrix(nrow = 2, ncol = length(spectrum_x)-2) for(i in 2:length(spectrum_x)-1){    second_derivative[1,i-1] <- spectrum_x[i]    second_derivative[2,i-1] <- spectrum_y[i-1] + spectrum_y[i+1] -2*spectrum_y[i] }  # Find all local minima of second derivative peaks_x <- c() peaks_index <- c() second_derivative_border <- ncol(second_derivative)-1 for(i in 2:second_derivative_border){    if(second_derivative[2,i] < 0){    if((second_derivative[2,i] <= second_derivative[2,i-1]) & (second_derivative[2,i] < second_derivative[2,i+1])){       #if(((spectrum_y[i+1] >= spectrum_y[i]) & (spectrum_y[i+1] > spectrum_y[i+2])) | ((spectrum_y[i+1] > spectrum_y[i]) & (spectrum_y[i+1] >= spectrum_y[i+2]))){       # Add local minima to peak list       peaks_x <- c(peaks_x, second_derivative[1,i])       peaks_index <- c(peaks_index, i)    }    } }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-8-fix-name-of-samples-in-blood-dataset","dir":"","previous_headings":"CHECK","what":"CHECK-8: Fix name of samples in blood dataset","title":"Open","text":"Blood Bood. [!IMPORTANT] Check result: Fixed branch test-glc","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"check-9-ask-wolfram-about-peak-selection","dir":"","previous_headings":"CHECK","what":"CHECK-9: Ask Wolfram about peak selection","title":"Open","text":"Ask Wolfram whether ’s ok peak selection sometimes selects two peaks one local maximum. [!IMPORTANT] Check result: ’s ok intention.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-1-use-temp-dirs-for-example-data","dir":"","previous_headings":"FEATURE","what":"FEATURE-1: Use temp dirs for example data","title":"Open","text":"Function download_example_data allow users specify temp dir instead usual XDG directory. useful pass CRAN checks CRAN doesn’t allow writing th user’ home directory. Done 1.1.0+d65098c.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-2-add-minimal-example-dataset","dir":"","previous_headings":"FEATURE","what":"FEATURE-2: Add minimal example dataset","title":"Open","text":"Add minimal dataset package, user can run examples without download full example data. minimal dataset smaller 1MB. Idea: remove every second third datapoint two example spectra, enough get 1MB. Canceled 1.1.0+d65098c introduced caching download_example_data, need including minimal dataset anymore.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-3-batch-mode","dir":"","previous_headings":"FEATURE","what":"FEATURE-3: Batch Mode","title":"Open","text":"batch mode, steps truly automatically creates pdf containing quality control images. pdf can inspected later based findings function call can adjusted. PR test-glc: Add test cases generate_lorentz_curves. Just copy test cases MetetaboDecon1D adjust little bit. PR batch-mode: Add test cases generate_lorentz_curves_v2. Just copy test cases generate_lorentz_curves fix generate_lorentz_curves_v2 pass tests. (Now backwards compatibility) PR batch-mode: Replace generate_lorentz_curves generate_lorentz_curves_v2 PR batch-mode: Add remaining arguments MetaboDecon1D generate_lorentz_curves make sure passed correctly PR batch-mode: Add argument ask generate_lorentz_curves PR batch-mode: Adjust mock_readline throws exception called often answers PR batch-mode: Implement ask parameter generate_lorentz_curves tests pass PR clear-helpers: Remove helper functions used anymore","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-4-parallelize","dir":"","previous_headings":"FEATURE","what":"FEATURE-4: Parallelize","title":"Open","text":"Batch mode can also run parallel speed calculations. Instead waiting 1h need wait 3 6 minutes .","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-5-add-test-suite","dir":"","previous_headings":"FEATURE","what":"FEATURE-5: Add test suite","title":"Open","text":"Write test cases every function ensure future updates don’t break existing behaviour. Tests run automatically upon pull requests pushes main.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-6-return-lambda-in-hertz","dir":"","previous_headings":"FEATURE","what":"FEATURE-6: Return lambda in hertz","title":"Open","text":"Original Teams Messages: Wolfram 2023/11/08 3:29 PM Hi Tobi, ich würde MetaboDecon gerne noch um ca zwei-drei Zeilen Code erweitern. wir geben für jedes Signal einen lambda Wert , das ist die halbe Signalbreite auf halber Höhe. Dieser Wert wird Datenpunkten angegeben. Für viele Anwendungen braucht man diesen Wert aber auch Hertz d.h. ich würde auch die lamda Werte Hertz angeben die Umwandlung ist ganz einfach. Wolfram 2023/11/16 10:50 Hi Tobi hier ist der Code zur Linienbreitenberechnung Hz, Achtung ich hab hier immer die gesamte Linienbreite auf halber Höhe berechnet 2024/07/09: Done branch v1.2.0 commit 5a9ed6ab00d8e641a2aa82d209de6604d86bf9be.","code":"# Function to compute the linewidh for all detected features in Hz based on the original # values given in points # lw_hz = line width in Hz # sw_hz = spectral width in hz # dp datapoints return_path=c(\"C:/Users/Gronwald/Metabolomics/Statistics/Deconvolution/Rechnungen_wolfram/Alex_Ref_metabolites_in_Water/\") lw_hz <- function(spectrum_data, sw_hz) {    for (entry in spectrum_data)    {       dp <- entry$x_values[1] * 1000 + 1 # multipy  with 1000 (scale factor) and add 1 as last datapoint has index 0       cat(\"dp=\", dp, \"\\n\")       # multiply with 1000 (sale factor)       # multiply with 2 to get full linewidth instead of half-linewidth       # take abs as original lambda is given in negative values       entry$lambda_hz<-abs((sw_hz/dp)*entry$lambda*1000*2)       cat(\"lambda= \",entry$lambda_hz[5],\"\\n\") # random signal to show that everything works       entry$rl1<-data.frame(entry$peak_triplets_middle,entry$lambda_hz)       entry$rl2<-data.frame(entry$rl1,t(entry$integrals))       ret_nam<-paste(return_path,entry$filename,\"_lw.csv\", sep=\"\")       write.csv2(entry$rl2,file=ret_nam)    } }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-7-improve-return-value","dir":"","previous_headings":"FEATURE","what":"FEATURE-7: Improve return value","title":"Open","text":"complete history transformations, e.g. “removal water signal”, “removal negative values” “smoothing” traceable return value generate_lorentz_curves. Therefore propose following changes return value generate_lorentz_curves: number_of_files –> length list filename –> path x_values –> remove (Currently given “scaled data points”, strange unit) x_values_ppm –> ppm y_values –> si spectrum_superposition –> ?? mse_normed –> mse index_peak_triplets_middle –> peaks$middle index_peak_triplets_left –> peaks$left index_peak_triplets_right –> peaks$right peak_triplets_middle –> remove (see REFACTOR-6 “Single source Truth”) peak_triplets_left –> remove (see REFACTOR-6 “Single source Truth”) peak_triplets_right –> remove (see REFACTOR-6 “Single source Truth”) integrals –> ?? signal_free_region –> sfr range_water_signal_ppm –> ws –> ?? lambda –> ?? x_0 –> ?? “??”” values haven’t yet checked ’re calculated, really say whether named. others, improved return value look like : ppm (parts per million data point) raw (raw) wows (without water signal) wows_woneg (without water signal negative values) wows_woneg_smoothed (without water signal, negative values smoothed) mse (mean squared error) left (index left data point) center (index middle data point) right (index right data point) left (left border) right (right border) wshw (water signal half width ppm) path (absolute path urine_1) … 2024/06/28: Closed without implementation, keep return value generate_lorentz_curves backwards compatible MetabDecon1D instead fix deconvolute_spectra.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-9-implement-read_spectra","dir":"","previous_headings":"FEATURE","what":"FEATURE-9 Implement read_spectra","title":"Open","text":"Implement export read_spectra read_spectrum way DTYPP interpreted correctly (see CHECK-1) spectrum width (SW) Hz well Magnetic Field Strength returned (see FEATURE-6). function can used read spectra character string provided argument deconvolute_spectra() generate_lorentz_curves (see FEATURE-11). 2024/07/03: done branch v1.2.0 commit e3c35dce9965cf9a3a44383be818a8f5ab1b0c6e. Note: Magnetic Field Strength returned directly, can calculated via function calc_B().","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-11-accept-dataframes-in-glc","dir":"","previous_headings":"FEATURE","what":"FEATURE-11: Accept dataframes in GLC","title":"Open","text":"Let generate_lorentz_curves accept dataframes input. useful Maximilians Bachelorthesis also makes testing easier. necessary, implement private wrapper around read_spectra, called read_spectra_glc converts return value read_spectra format can used deconvolute_spectra. 2024/07/15: done branch v1.2.0 commit fa3c427cc1680925c6a12a0eab17f14673c6ee0f.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-14-provide-simulated-datasets","dir":"","previous_headings":"FEATURE","what":"FEATURE-14: Provide simulated datasets","title":"Open","text":"Provide simulated datasets blood spectra 2024/17/15: Done branch v1.2.0 commit d01706c1f5885b6e965b55c6db53c041c866ed47","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-15-add-lifecycle-badges","dir":"","previous_headings":"FEATURE","what":"FEATURE-15: Add lifecycle badges","title":"Open","text":"Add lifecycle badges non-stable exported functions. Functions exported used marked “experimental” (possible) “internal” (idea: check badges stored whether can modified). 2024/07/15: Closed. done DOC-1: Document whole package.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-17-discard-output","dir":"","previous_headings":"FEATURE","what":"FEATURE-17: Discard output","title":"Open","text":"default output generate_lorentz_curves discarded parallel phase. phase, print message remaining task might take minutes live output can disabled settings share_stdout = TRUE, output might scrambled depending configuration R installation operating system. 2024/07/09: Done branch v1.2.0 commit f9bf57a5e4c7167dfc3231cfe0ee515b40ad12bf.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-20-implement-deconvolute_blood","dir":"","previous_headings":"FEATURE","what":"FEATURE-20: Implement deconvolute_blood","title":"Open","text":"Implement function deconvolute_blood() roughly following 2024-10-01 20:21: Done branch v1.2.0 commit 9b7d65d","code":"deconvolute_blood <- function(cache = TRUE, force = FALSE, ...) {    rds <- file.path(cachedir(), \"deconvolute_blood.rds\")    new <- old <- if (file.exists(rds)) readRDS(rds) else NULL    if (cache && is.null(old)) {       path <- download_example_datasets(...)       new <- deconvolute(path)    }    if (!(identical(new, old) || is.null(old))) {       warning(\"Cache and deconvolution differ.\", immediate. = TRUE)    }    if (cache && (is.null(old) || force)) {       logf(\"Writing results to cache file %s\", rds)       saveRDS(new, rds)    }    return(new) }"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-16-improve-multiprocessing","dir":"","previous_headings":"FEATURE","what":"FEATURE-16: Improve multiprocessing","title":"Open","text":"Right now, output gets scrambled procs share one stdout. can fix using parLapply, distributing tasks ourselver cores mainloop collecting outputs results. Done branch v1.2 commit bea9348 Thu Sep 12 17:14:20 2024 +0200","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"feature-18-implement-plot_spectrum","dir":"","previous_headings":"FEATURE","what":"FEATURE-18: Implement plot_spectrum","title":"Open","text":"Implement plot_spectrum successor following functions: plot_triplets plot_lorentz_curves_save_as_png plot_spectrum_superposition_save_as_png functionality, .e. showing triplets showing individual lorentz curves showing superposition lorentz curves storing plots png disk controllable via function arguments. 2024-12-11: Done branch v1.2.0 commit 44f8f02","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-1-combine-load_xxx_spectrum-functions","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-1: Combine load_xxx_spectrum functions","title":"Open","text":"Combine load_jcampdx_spectrum load_bruker_spectrum one function, calls read_jcampdx read_bruker depending type argument. read_*_spectrum function return measured signal strengths vector y_ss corresponding ppm values vector x_ppm. elements returned load_*_spectrum functions can calculated . makes code maintainable easier understand. Useful info reading bruker files: according Bruker_NMR_Data_Formats.pdf (available Google), text files acqu? proc? contain acquisition processing parameters. Files ending s (acqus, proc2s, …) describe status dataset. files (acqu, proc2, …) contain parameter values used later processing acquisition steps. Format parameter files corresponds JCAMP-DX standard, allows inclusion vendor specific parameters prefixing character sequence ##$. reason, TopSpin parameters file preceded sequence.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-2-text-output--license-timestamps","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-2: Text Output (-License, +Timestamps)","title":"Open","text":"output improved. License printed every function execution, unless strong reason . Timestamps added output, user automatically rough idea long function take finish.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-4-plotting-speed","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-4: Plotting speed","title":"Open","text":"Function plot_lorentz_curves_save_as_png suuuuper slow. try make quicker. 2024/06/28: Closed without implementation, function never exported now also properly marked noRd.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-5-speedup-smoothing","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-5: Speedup smoothing","title":"Open","text":"Currently, smoothing spectra done -loop R, slow. can speed using filter function, implemented C therefore much faster. Implemented function smooth_signals_v2 file generate_lorentz_curves.R. Unfortunately, results slight different, due numeric differences two methods, ie.","code":"s1 <- smooth_signals_v1(spec) s2 <- smooth_signals_v2(spec) identical(s1, s2) == FALSE all.equal(s1, s2) == TRUE"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-6-use-a-single-unit-as-source-of-truth","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-6: Use a single unit as source of truth","title":"Open","text":"Function generate_lorentz_curves MetaboDecon1D use different units calculations returned list, e.g. ppm (parts per million), dp (data points) sdp (scaled data points) x values si (signal intensity), ssi (scaled signal intensity) y values. Thats good, conversion introduces numeric rounding errors whenever transformation, e.g. “removal water signal”, “removal negative values” “smoothing”, need transformation units. Instead, use one unit single source truth provide conversion functions user, e.g. ppm_to_hz ppm_to_dp. final returned list, ’s ok units, least calculation stick ppm si think. also makes input user much easier, something like following wouldn’t occur: function deconvolution argument signal_free_region interpreted ppm isFALSE(same_parameter) || current_filenumber == 1. Else, argument signal_free_region interpreted sdp. confusing error prone. 2024/06/30: Tracked FEATURE-10 instead.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-7-split-monolithic-functions-into-smaller-parts","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-7: Split monolithic functions into smaller parts","title":"Open","text":"original MetaboDecon1D function approx. 350 lines code original deconvolution function approx 1000 lines code. way much testing modifying. extract copy-pasted parts indivual functions test functions separately. 2024/06/30: Done function generate_lorentz_curves branch v1.2.0.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-8-improve-docs-for-metabodecon1d-return-value","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-8: Improve docs for Metabodecon1D return value","title":"Open","text":"Original Teams Message Wolfram 2023/11/08 3:29 PM Hi Tobi, es kommen ja letzter Zeit eine ganze Menge Fragen zu MetaboDecon auch nach den Variablen im Output. Ich hab hier eine Zusammenstellung dieser Variablen gemacht, vielleicht können wir das auch noch einbauen? Viele Grüße Wolfram Output variables MetaboDecon1D (variables obtained analyzed spectrum): Number_of_files: number analyzed spectra (case folder contains one spectrum value >1). Filename: name analyzed spectrum X_values: data points original spectrum numbered descending order. first data point maximum value last one value 0. example 131072 (128k) datapoints, first value 131.071. Note numbers divided scale factor default value 1000 x_axis. X_values_ppm: corresponding ppm values provided. Y_values: intensities original datapoints Spectrum_superposition: y-values superposition estimated Lorentzcurves, values provided point-wise manner. Mse_normed: final mean-squared-error optimization Lorentz curves. Index_peak_triplets_middle: identified signal defined three data points. middle data point given. Note, numbering starts ascending order left right. Index_peak_triplets_left: left data point. Index_peak_triplets_right: right data point. Peak_triplets_middle: identified signal position middle data point given ppm, order left right. Peak_triplets_right: right data point Peak_triplets_left: left datapoint. Integrals: integrals deconvoluted signals left right . Signal_free_region: e.g., 109.03619, 21.79452, left right borders signals expected. Values points like x_values 5 instead 3 decimals. Range_water_signal_ppm: half width water signal region .e., signals identified ppm, example 0.15 ppm. : -*p area Lorentz-curve, see also integrals, always provided negative number. Lambda: identified signals half width half height. provided negative value data points divided scale-factor .e., 1000. example, value von 0.00525 corresponds 5.25 data points. spectral width 12019 Hz (example) 31072 data points corresponds half linewidth half height 0.48 Hz. X_0: center estimated Lorentz curves. Provided data points divided scale factor (see also x_values). Scale_factor: scale factor x- y-axis reduce numerical instabilities, default 1000 1000000. Toy example TSP signal (note numbers differ spectrum): TSP signal 979, index_peak_triplets_middle[979]=96955, x_0[979]=34.11715 (Note (131072-96955)/1000=34.117), peak_triplets_middle=0.000 ppm, lambda[979]=-0.00525 corresponds 0.48 Hz. [979]=-1.218312; * Pi=-3.82, integrals[979]=3.82) 2024-06-30: Done commit ab20d64","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-9-replace-glc-with-generate_lorentz_curves","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-9: Replace glc with generate_lorentz_curves","title":"Open","text":"Replace glc() calls calls generate_lorentz_curves(). 2024-10-01 17:43: Done branch v1.2.0 commit 0b52023","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-10-replace-all-md1d-with-metabodecon1d-calls","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-10: Replace all md1d with MetaboDecon1D calls","title":"Open","text":"Implement function get_MetaboDecon1D_answers takes path spectra well required sfr, wshw values input returns vecotr corresponding answers questions asked MetaboDecon1D. replace md1d calls code snippets shown : makes directly visible cumbersome use old function also can applied input folder (contrast current md1d function). 2024-10-07 09:21:34: Done branch v1.2.0 commits 18db936, 8f01fae 6bdaa6f","code":"answers <- get_MetaboDecon1D_answers(path, sfr = c(3.5, 3.4), wshw = 0) decons <- evalwith(answers = answers, MetaboDecon1D(...))"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-11-implement-calc_prarp","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-11: Implement calc_prarp","title":"Open","text":"Implement function calc_prarp takes decon object optionally truepar object. truepar given, shall taken decon$meta$simpar. function calculates PRARP (peak ratio area ratio product) , comparing estimated parameters true parameters. See function check_decon_quality() existing code reuse. Done 2024/10/08 branch v1.2.0 commit 1b7b4c1","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-12-write-compliance-tests","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-12: Write compliance tests","title":"Open","text":"Write testcases following functions check whether produce results compliant MetaboDecon1D(): deconvolute_ispec() deconvolute_ispecs() Done 2025/01/13 branch v1.2.0 commit 8c4a16b..c6c6e6a","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"refactor-13-write-prarp-tests","dir":"","previous_headings":"REFACTOR","what":"REFACTOR-13: Write PRARP tests","title":"Open","text":"Write testcases following functions test good PRARP well correct return type: MetaboDecon1D() generate_lorentz_curves() deconvolute() deconvolute_ispec() deconvolute_ispecs() Done 2025/01/13 branch v1.2.0 commit 8c4a16b..c6c6e6a","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-0-omit-functions-for-in-title","dir":"","previous_headings":"CRAN","what":"CRAN-0: Omit “Functions for” in title","title":"Open","text":"Omit redundant “Functions ” title.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-1-omit-functions-for-in-description","dir":"","previous_headings":"CRAN","what":"CRAN-1: Omit “Functions for” in DESCRIPTION","title":"Open","text":"start description “Functions ”, “package”, package name, title similar.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-2-explain-acronyms-like-nmr","dir":"","previous_headings":"CRAN","what":"CRAN-2: Explain acronyms like NMR","title":"Open","text":"Always explain acronyms description text. e.g.: NMR","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-3-use-correct-reference-format-in-description","dir":"","previous_headings":"CRAN","what":"CRAN-3: Use correct reference format in DESCRIPTION","title":"Open","text":"Write references description DESCRIPTION file form authors (year) <doi:...> space ‘doi:’ angle brackets auto-linking. (want add title well please put quotes: “Title”)","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-4-explain-return-value-in-function-docs","dir":"","previous_headings":"CRAN","what":"CRAN-4: Explain return value in function docs","title":"Open","text":"Please add \\value .Rd files regarding exported methods explain functions results documentation. Please write structure output (class) also output means. (function return value, please document , e.g. \\value{return value, called side effects} similar). Missing Rd-tags 11 .Rd files, e.g.: combine_peaks.Rd: \\value, dohCluster.Rd: \\value, …","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-5-remove-examples-from-unexported-functions","dir":"","previous_headings":"CRAN","what":"CRAN-5: Remove examples from unexported functions","title":"Open","text":"examples unexported functions. Please either omit examples export functions. Examples unexported function example: plot_spectrum_superposition_save_as_png().","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-6-fix-vignettes","dir":"","previous_headings":"CRAN","what":"CRAN-6: Fix vignettes","title":"Open","text":"addition, see: “Unexecutable code vignettes/metabodecon.Rmd”: # \"2)\" instead afterwards, guess.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-7-check-dontrun-examples","dir":"","previous_headings":"CRAN","what":"CRAN-7: Check dontrun examples","title":"Open","text":"Remove dontrun examples executable < 5 sec, create additionally small toy examples allow automatic testing < 5 sec. Reason: \\dontrun{} used example really executed user, e.g. missing additional software, missing API keys, etc. ’s wrapping examples \\dontrun{} adds comment (“# run:”) warning user. Alternative: also replace \\dontrun{} \\donttest, takes longer 5 sec executed, preferable automatic checks functions. Otherwise, can also write tests. Done 2025/01/13 branch v1.2.0 commit 8c4a16b..c6c6e6a","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-8-functions-should-not-write-to-disk-by-default","dir":"","previous_headings":"CRAN","what":"CRAN-8: Functions should not write to disk by default","title":"Open","text":"Please ensure functions write default examples/vignettes/tests user’s home filespace (including package directory getwd()). allowed CRAN policies. Please omit default path writing functions. examples/vignettes/tests can write tempdir(). ToSc: affected functions : generate_lorentz_curves plot_triplets 2024/06/28: Implemented f5d63f7, 6491b42 76b8c4d.","code":""},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"cran-9-functions-should-not-change-working-dir-or-global-options","dir":"","previous_headings":"CRAN","what":"CRAN-9: Functions should not change working dir or global options","title":"Open","text":"Please make sure change user’s options, par working directory. really within functions, please ensure immediate call .exit() settings reset function exited. E.g. R/MetaboDecon1D.R. ’re familiar function, please check ?.exit. function makes possible restore options exiting function even function breaks. Therefore needs called immediately option change within function.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"fix-1-prevent-crashes-for-high-smoothing","dir":"","previous_headings":"FIX","what":"FIX-1: Prevent crashes for high smoothing","title":"Open","text":": Maximilian Sombke Maximilian.Sombke@stud.uni-regensburg.de Sent: Friday, July 12, 2024 2:59 PM : Tobias2 Schmidt Tobias2.Schmidt@klinik.uni-regensburg.de Subject: Re: Benchmark Metabodecon> Hey, sorry für die ganzen mails. Ich wollte es nur früh wie möglich kommunizieren, falls ich keine Lösung finde. Ich hab glaube ich sogar etwas sehr Interessantes gefunden worüber wir nächste Woche nochmal reden sollten. Als kurze Zusammenfassung: Meine Vermutung, dass es daran liegt, dass keine Peaks gefunden werden ist nicht richtig. Das tatsächliche Problem ist, dass keine Peaks herausgefiltered werden. Hier mal ein output log: Es findet also 4 peaks aber keiner davon scheint einen score zu haben der niedrig genug ist um herausgefiltered zu werden, wodurch das dann einfach NA ist und das Program crashed. Das passiert hauptsächlich wenn smoothing einen gewissen Threshold überschreitet, z.B. smoothing iterations 20 und smoothing window size 29, bzw. 15 und 39, oder 25 und 25. Delta scheint zu mindest keinen Einfluss hierauf zu haben, es war nur delta = 1 die erste Zeile im Grid der sollche hohen smoothing kombinationen erreicht werden. Die zu hohen Parameter nicht zu verwenden hat das Problem (zu mindest bis jetzt) gelöst. Sombke Maximilian 2024/07/09: Done branch v1.2.0 commit f5c204cab44b838afe5d5e8c7ace8c74f11b293c.","code":"2024-07-12 14:54:40.96 Starting deconvolution of 1 spectra with 1 core 2024-07-12 14:54:40.96 Starting deconvolution of sim_6 2024-07-12 14:54:40.96 Removing water signal 2024-07-12 14:54:40.96 Removing negative signals 2024-07-12 14:54:40.96 Smoothing signals 2024-07-12 14:54:41.06 Starting peak selection 2024-07-12 14:54:41.06 Detected 4 peaks 2024-07-12 14:54:41.06 Removing peaks with low scores 2024-07-12 14:54:41.06 Removed NA peaks 2024-07-12 14:54:41.06 Initializing Lorentz curves Error in xl[ds] <- 2 * xc[ds] - xr[ds] (deconvolution.R#63): NAs are not allowed in subscripted assignments"},{"path":"https://spang-lab.github.io/metabodecon/TODOS.html","id":"doc-1-document-whole-package","dir":"","previous_headings":"FIX","what":"DOC-1: Document whole package","title":"Open","text":"Document whole package vignettes, including chapters : Classes.Rmd Compatibility.Rmd Contributing.Rmd Datasets.Rmd FAQ.Rmd MetaboDecon1D.Rmd Get_Started.Rmd Done 2025/01/14 branch v1.2.0 commit 14e0326..71fdc2c","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"spectrum","dir":"Articles","previous_headings":"Class Overview","what":"spectrum","title":"Metabodecon Classes","text":"Represents one NMR spectrum. Objects class ‘spectrum’ least elements 1-3 section Elements v1.2+.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"decon0","dir":"Articles","previous_headings":"Class Overview","what":"decon0","title":"Metabodecon Classes","text":"Represents one deconvoluted NMR spectrum stored old MetaboDecon1D() format. Objects class ‘decon0’ least elements 1-18 section Elements v0.2+.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"decon1","dir":"Articles","previous_headings":"Class Overview","what":"decon1","title":"Metabodecon Classes","text":"Represents one deconvoluted NMR spectrum stored backwards compatible generate_lorentz_curves() format. Objects class ‘decon1’ elements section Elements v0.2+.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"decon2","dir":"Articles","previous_headings":"Class Overview","what":"decon2","title":"Metabodecon Classes","text":"Represents one deconvoluted NMR spectrum stored new deconvolute() format. Objects class ‘decon2’ elements section Elements v1.2+ elements sit$al lcpar$x0al set NULL.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"align","dir":"Articles","previous_headings":"Class Overview","what":"align","title":"Metabodecon Classes","text":"Represents one deconvoluted NMR spectrum individual peaks aligned using [align()]. Objects class ‘align’ elements section Elements v1.2+.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"collections","dir":"Articles","previous_headings":"Class Overview","what":"Collections","title":"Metabodecon Classes","text":"classes mentioned represent individual objects, single spectrum, deconvolution, alignment. However, often useful describe collections objects, list spectra deconvolutions. Therefore, individual class, corresponding “collection” class provided. collection classes named: spectra, decons0, decons1, decons2, aligns.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"elements-v1-2","dir":"Articles","previous_headings":"Elements","what":"Elements v1.2+","title":"Metabodecon Classes","text":"cs: Vector chemical shifts (CS) parts per pillion (ppm). Must length si. si: Vector signal intensities (SI) arbitrary units (au). Element si[] signal intensity measured chemical shift cs[], .e. si must length cs. name: name spectrum, e.g. \"Blood 1\" \"Urine 2\". path: path file/folder containing spectrum data. E.g. \"example_datasets/jcampdx/urine/urine_1.dx\" \"example_datasets/bruker/urine/urine\". type: type experiment, e.g. \"H1 CPMG\" \"H1 NOESY\". fq: Vector signal frequencies Hertz (Hz). Must length si cs. mfs: Magnetic field strength Tesla, e.g. 14.1. simpar: True Lorentz Curve parameters. List elements , lambda x0. details see element lcpar. available spectrum simulated. nfit: number fitting iterations. smopts: smoothing parameters used deconvolution. delta: threshold used peak filtering. sfr: Borders signal free region ppm. wshw: Water signal half width ppm. wsrm: SIs Water Signal Removal (WSRM), nvrm: SIs WSRM Negative Value Removal (NVRM). sm: SIs WSRM, NVRM smoothing. sup: SIs superposition Lorentz Curves. al: SIs alignment. center: Indices peak centers. left: Indices left borders. right: Indices right peak borders. : Amplitude parameter. lambda: Halfwidth parameter. x0: Center parameter. x0al: Center parameter spectrum aligned. raw: MSE si sit$sup norm: MSE si sit$sup, divided sum(sit$sup) sm: MSE sit$sm sit$sup smnorm: MSE sit$sm sit$sup, divided sum(sit$sup). Equals mse_normed Elements v0.2+.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Classes.html","id":"elements-v0-2","dir":"Articles","previous_headings":"Elements","what":"Elements v0.2+","title":"Metabodecon Classes","text":"filename: Name analyzed spectrum. x_values: Scaled datapoint numbers (SDP). Datapoints numbered descending order going N-1 0, N equals total amount data points. Scaled data point numbers obtained dividing numbers scale factor x-axis. .e., spectrum 131072 datapoints scale factor 1000, first scale datapoint value 131.071 last one value 0. x_values_ppm: chemical shift datapoint ppm (parts per million). y_values: scaled signal intensity (SSI) datapoint. Obtained reading raw intensity values provided data_path integers dividing scale factor y-axis. spectrum_superposition: Scaled signal intensity obtained calculating sum estimated Lorentz Curves data point. mse_normed: normalized, smoothed signal intensity data point normalized superposition Lorentz Curves data point . Normalized context means vectors scaled sum data points equals 1. peak_triplets_middle: Chemical shift peak centers ppm. peak_triplets_left: Chemical shift left peak borders ppm. peak_triplets_right: Chemical shift right peak borders ppm. index_peak_triplets_middle: Datapoint numbers peak centers. index_peak_triplets_left: Datapoint numbers left peak borders. index_peak_triplets_right: Datapoint numbers right peak borders. integrals: Integrals Lorentz Curves. signal_free_region: Borders signal free region spectrum scaled datapoint numbers. Left first element right second element signals expected. available MetaboDecon1D() called one spectra input. range_water_signal_ppm: Half width water signal ppm. Potential signals region ignored. available MetaboDecon1D() called one spectra input. : Amplitude parameter Lorentz Curves. Provided negative number maintain backwards compatibility MetaboDecon1D. area Lorentz Curve calculated . lambda: Half width Lorentz Curves scaled data points. Provided negative value maintain backwards compatibility MetaboDecon1D. Example: value -0.00525 corresponds 5.25 data points. spectral width 12019 Hz 131072 data points corresponds halfwidth half height approx. 0.48 Hz. corresponding calculation : (12019 Hz / 131071 dp) * 5.25 dp. x_0: Center Lorentz Curves scaled data points. y_values_raw: raw signal intensity datapoint x_values_hz: frequency datapoint Hz mse_normed_raw: Normalized mean squared error comparing raw signal intensities superposition Lorentz Curves. x_0_hz: Center Lorentz Curves Hz. x_0_dp: Center Lorentz Curves data points. x_0_ppm: Center Lorentz Curves ppm. A_hz: Amplitude parameter Lorentz Curves Hz. A_dp: Amplitude parameter Lorentz Curves data points. A_ppm: Amplitude parameter Lorentz Curves ppm. lambda_hz: Half width Lorentz Curves Hz. lambda_dp: Half width Lorentz Curves data points. lambda_ppm: Half width Lorentz Curves ppm.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/articles/Compatibility.html","id":"table-1-version-matrix","dir":"Articles","previous_headings":"","what":"Table 1: Version Matrix","title":"Compatibility","text":"-: internal available package ?: yet decided d: deprecated s: stable x: experimental","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/articles/Compatibility.html","id":"table-2-feature-matrix","dir":"Articles","previous_headings":"","what":"Table 2: Feature Matrix","title":"Compatibility","text":"BWC == backwards compatible F1 == MetaboDecon1D F2 == generate_lorentz_curves F3 == deconvolute_ispecs faster peak selection implementation also fixes indexing bug, cases shouldn’t effect, rare cases might cause one peak missed.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Contributing.html","id":"making-edits","dir":"Articles","previous_headings":"","what":"Making Edits","title":"Contributing","text":"Things can update, : Function code folder R Function documentation folder R Package documentation folder vignettes Test cases folder tests Dependencies file DESCRIPTION Authors file DESCRIPTION Whenever update things, run commands check everything still working expected: steps, can push changes Github create pull request.","code":"devtools::document() # Build files in man folder devtools::spell_check() # Check spelling (add false positives to inst/WORDLIST) urlchecker::url_check() # Check URLs run_tests(all = TRUE) # Execute tests from tests folder inkl. slow tests devtools::run_examples() # Run all examples in the package toscutil::check_pkg_docs() # Check function documentation for missing tags devtools::check() # Check package formalities devtools::install() # Install as required by next command pkgdown::build_site() # Build website in docs folder"},{"path":"https://spang-lab.github.io/metabodecon/articles/Contributing.html","id":"releasing-to-cran","dir":"Articles","previous_headings":"","what":"Releasing to CRAN","title":"Contributing","text":"Whenever package maintainer wants release new version package CRAN, : Check whether release requirements fulfilled Use following commands final check package release CRAN","code":"# Check spelling and URLs. False positive findings of spell check should be # added to inst/WORDLIST. devtools::spell_check() urlchecker::url_check()  # Slower, but more realistic tests than devtools::check() rcmdcheck::rcmdcheck(     args = c(\"--no-manual\", \"--as-cran\"),     build_args = (\"--no-manual\"),     error_on = (\"warning\"),     check_dir = \"../FastRet-RCMDcheck\" ) devtools::check(remote = TRUE, manual = TRUE, run_dont_test = TRUE)  # Check reverse dependencies. For details see: # https://r-pkgs.org/release.html#sec-release-revdep-checks revdepcheck::revdep_check(num_workers = 8)  # Send your package to CRAN's builder services. You should receive an e-mail # within about 30 minutes with a link to the check results. Checking with # check_win_devel is required by CRAN policy and will (also) be done as part # of CRAN's incoming checks. devtools::check_win_oldrelease() devtools::check_win_release() devtools::check_win_devel() devtools::check_mac_release()  # Use the following command to submit the package to CRAN of submit via the web # interface available at https://cran.r-project.org/submit.html. devtools::submit_cran()"},{"path":"https://spang-lab.github.io/metabodecon/articles/Datasets.html","id":"the-blood-dataset","dir":"Articles","previous_headings":"","what":"The Blood dataset","title":"Datasets","text":"blood dataset contains 16 one-dimensional CPMG NMR-spectra human blood plasma Bruker format. can found folder misc/datasets/blood metabodecon repository.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Datasets.html","id":"the-urine-dataset","dir":"Articles","previous_headings":"","what":"The Urine dataset","title":"Datasets","text":"urine dataset contains two one-dimensional NOESY NMR-spectra urine, available Bruker jcamp-dx format. can found folder misc/datasets/urine metabodecon repository.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Datasets.html","id":"the-sim-dataset","dir":"Articles","previous_headings":"","what":"The Sim dataset","title":"Datasets","text":"scenarios useful work simulated datasets instead real data, : need know underlying distribution data check whether function works expected. speed test cases examples data points sufficient test function. cases, metabodecon includes simulated dataset called sim, generated applying following steps spectrum blood dataset: Deconvolute spectrum using generate_lorentz_curves() default parameters Extract Lorentz curve parameters peaks 3.52 3.37 ppm Generate 2048 equidistant chemical shift values 3.59 3.28 ppm1 Calculate signal intensity chemical shift superposition Lorentz curves Add random noise simulated spectrum 2 first two 16 simulated spectra plotted . details simulation process, see source code function simulate_spectrum(). Figure: first two simulated datasets sim.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/Datasets.html","id":"how-to-download-datasets","dir":"Articles","previous_headings":"","what":"How to download datasets","title":"Datasets","text":"Due size constraints R packages, mentioned datasets included default package installed, must explicitly downloaded afterwards. can done via command download_example_datasets(): Spectra come pre-installed package require separate download, : 16 spectra sim dataset two spectra urine dataset Bruker format first spectrum urine dataset jcamp-dx format","code":"library(metabodecon) # Set persistent = TRUE to store the files at a persistent location. This way, # the next time you call `download_example_datasets()`, the files will not be # downloaded again. path <- download_example_datasets(persistent = FALSE) tree(path)"},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/articles/FAQ.html","id":"water-artifact","dir":"Articles","previous_headings":"FAQ","what":"Water Artifact","title":"FAQ","text":"Question: choose n Water artefact fully inside red vertical lines? (y/n), metabodecon asks Choose another half width range (ppm) water artefact, instead left right borders. enter ?  Answer: water signal always centered Bruker, specify half width range make water area around midpoint wider narrower.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/FAQ.html","id":"parameter-optimization","dir":"Articles","previous_headings":"FAQ","what":"Parameter Optimization","title":"FAQ","text":"Question: exactly 10 iterations parameter optimization? Answer: value determined empirically. found 10 iterations enough get good fit iterations improve fit significantly, take longer. Obviously, objective stopping criterion better likely implemented future version.","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/FAQ.html","id":"file-structure","dir":"Articles","previous_headings":"FAQ","what":"File Structure","title":"FAQ","text":"Question: file structure expected bruker jcampdx formats? Answer: expected file structure follows:","code":"C:/bruker/urine              # data_path (user input) ├── urine_1/                 # name (user input) │   └── 10/                  # spectroscopy_value (user input), called expno in TopSpin manual │       ├── acqus            # acqus_file (constant) │       └── pdata/           # processings_dir (constant) │           └── 10/          # processing_value (user input), called procno in TopSpin manual │               ├── 1r       # spec_file (constant) │               └── procs    # spectrum_file (constant) ├── urine_2/... └── ... C:/jcampdx/urine    # data_path (user input) ├── urine_1.dx      # spectrum_file (user input) ├── urine_2.dx └── ..."},{"path":"https://spang-lab.github.io/metabodecon/articles/Get_Started.html","id":"deconvolute-spectra","dir":"Articles","previous_headings":"","what":"Deconvolute spectra","title":"Get Started","text":"find path Sim dataset, can use metabodecon_file() function, returns path file directory within package directory. deconvolute spectra within Sim dataset can use generate_lorentz_curves(): calling generate_lorentz_curves(), function ask answer following questions determine optimal deconvolution parameters: Use parameters spectra? (y/n) Number spectrum adjusting parameters? (1: sim_01, 2: sim_02, …) Signal free region correctly selected? (y/n) Water artefact fully inside red vertical lines? (y/n) can answer questions one two y 1, dataset homogeneous, .e., spectra measured lab acquisition processing parameters. However, heterogeneous datasets, ’s advisable optimize parameters batch spectra individually. Questions three four accompanied two plots, shown Figure 1, help verify accuracy selected signal-free region (SFR) water signal half-width (WSHW) 1. case, provided parameters already fine, can answer questions y. adjustments needed, can respond n input correct values. Figure 1. first spectrum Sim dataset. x-Axis gives chemical shift datapoint parts per million (ppm). y-Axis gives signal intensity datapoint arbitrary units (au). borders signal free region shown green vertical lines left plot. center water signal shown red vertical line right plot. water signal half width set zero, borders water signal region equal center. using function scripts, interactive user input desired, can disable interactive prompting setting parameter ask FALSE. case, provided parameters used deconvolution spectra automatically. 2","code":"sim_dir <- metabodecon::metabodecon_file(\"bruker/sim\") deconvoluted_spectra <- metabodecon::generate_lorentz_curves(     data_path = sim_dir, # Path to directory containing spectra     sfr = c(3.35, 3.55), # Borders of signal free region (SFR) in ppm     wshw = 0,            # Half width of water signal (WS) in ppm     smopts = c(2, 5),    # Configure smoothing parameters     verbose = FALSE      # Suppress status messages )"},{"path":"https://spang-lab.github.io/metabodecon/articles/Get_Started.html","id":"visualize-deconvoluted-spectra","dir":"Articles","previous_headings":"","what":"Visualize deconvoluted spectra","title":"Get Started","text":"completing deconvolution, advisable visualize extracted signals using plot_spectrum() assess quality deconvolution: 16 generated plots, first two shown examples Figure 2. Things look : smoothing remove real signals. smoothing strong, .e., smoothed signal intensity (SI) different raw SI, adjust smoothing parameters smopts call generate_lorentz_curves(). superposition lorentz curves good approximation smoothed SI. major peaks missed algorithm, reduce threshold delta call generate_lorentz_curves(). Figure 2. Deconvolution results first two spectra Sim dataset. raw SI (black), smoothed SI (blue), superposition Lorentz curves (red) closely aligned, indicating smopts delta chosen well deconvolution successful.","code":"# Visualize the first spectrum only metabodecon::plot_spectrum(deconvoluted_spectra[[1]])  # Visualize all spectra and save them to a pdf file pdfpath <- tempfile(fileext = \".pdf\") pdf(pdfpath, width = 12, height = 8) for (i in seq_along(deconvoluted_spectra)) {     metabodecon::plot_spectrum(         x = deconvoluted_spectra[[i]],         main = deconvoluted_spectra[[i]]$filename,         foc_frac = c(0.25, 0.75)     ) } dev.off() cat(\"Plots saved to\", pdfpath, \"\\n\")"},{"path":"https://spang-lab.github.io/metabodecon/articles/Get_Started.html","id":"align-deconvoluted-spectra","dir":"Articles","previous_headings":"","what":"Align deconvoluted spectra","title":"Get Started","text":"last step Metabodecon Workflow align deconvoluted spectra. necessary chemical shifts peaks spectra may vary slightly due differences measurement conditions. visualize data alignment, can use plot_spectra(). alignment, can use align(): resulting plots shown Figure 3 Figure 3. Overlay 16 deconvoluted spectra Sim dataset. x-Axis gives chemical shift datapoint parts per million (ppm). y-Axis gives signal intensity datapoint arbitrary units (au). specta pretty similar except Spetrum 2, appears shifted approx. 0.01 ppm right.","code":"metabodecon::plot_spectra(deconvoluted_spectra) aligned_spectra <- metabodecon::align(deconvoluted_spectra, maxCombine = 1) metabodecon::plot_spectra(aligned_spectra)"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"metabodecon1d-usage-example","dir":"Articles","previous_headings":"","what":"MetaboDecon1D Usage Example","title":"MetaboDecon1D","text":"MetaboDecon1D package (v0.2.2) predecessor package can downloaded uni-regensburg.de/medicine/functional-genomics/staff/prof-wolfram-gronwald/software. include usage example can easily reference old behaviour point added features metabodecon (v1.x).","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"install-the-package","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Install the package","title":"MetaboDecon1D","text":"Open following link browser: uni-regensburg.de/medicine/functional-genomics/staff/prof-wolfram-gronwald/software Click MetaboDecon1D: R-package Deconvolution Integration 1D NMR data Download MetaboDecon1D_0.2.2.tar.gz Start R session enter command install.packages(\"C:/Users/tobi/Downloads/MetaboDecon1D_0.2.2.tar.gz\", repos = NULL, type = \"source\") (replace C:/Users/tobi/Downloads/MetaboDecon1D_0.2.2.tar.gz path downloaded file computer)","code":""},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"load-package","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Load package","title":"MetaboDecon1D","text":"","code":"library(MetaboDecon1D)"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"deconvolute-one-spectrum-in-bruker-format","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Deconvolute one spectrum in Bruker format","title":"MetaboDecon1D","text":"","code":"result <- MetaboDecon1D(     filepath = \"load_example_path\",     filename = \"example_human_urine_spectrum\",     file_format = \"bruker\" )"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"visualize-results-and-store-plots-as-png","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Visualize results and store plots as png","title":"MetaboDecon1D","text":"","code":"str(result) plot_triplets(result) plot_lorentz_curves_save_as_png(result) plot_spectrum_superposition_save_as_png(result)"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"deconvolute-one-spectrum-in-jcampdx-format","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Deconvolute one spectrum in jcampdx format","title":"MetaboDecon1D","text":"","code":"result <- MetaboDecon1D(     filepath = \"load_example_path\",     filename = \"example_human_urine_spectrum.dx\",     file_format = \"jcampdx\" ) str(result)"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"deconvolute-multiple-spectra-in-bruker-format","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Deconvolute multiple spectra in Bruker format","title":"MetaboDecon1D","text":"","code":"result <- MetaboDecon1D(     filepath = \"load_example_path\",     file_format = \"bruker\" ) str(result)"},{"path":"https://spang-lab.github.io/metabodecon/articles/MetaboDecon1D.html","id":"deconvolute-multiple-spectra-in-jcampdx-format","dir":"Articles","previous_headings":"MetaboDecon1D Usage Example","what":"Deconvolute multiple spectra in jcampdx format","title":"MetaboDecon1D","text":"","code":"jcamp_results <- MetaboDecon1D(     filepath = \"load_example_path\",     file_format = \"jcampdx\" ) plot_triplets(jcamp_results) plot_lorentz_curves_save_as_png(jcamp_results) plot_spectrum_superposition_save_as_png(jcamp_results)"},{"path":"https://spang-lab.github.io/metabodecon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tobias Schmidt. Author, maintainer, copyright holder. Martina Haeckl. Author, copyright holder. Yanren Linda Hu. Contributor. Wolfram Gronwald. Author, copyright holder.","code":""},{"path":"https://spang-lab.github.io/metabodecon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schmidt T, Haeckl M, Gronwald W (2025). metabodecon: Deconvolution Alignment 1d NMR Spectra. R package version 1.2.3, https://spang-lab.github.io/metabodecon/, https://github.com/spang-lab/metabodecon/.","code":"@Manual{,   title = {metabodecon: Deconvolution and Alignment of 1d NMR Spectra},   author = {Tobias Schmidt and Martina Haeckl and Wolfram Gronwald},   year = {2025},   note = {R package version 1.2.3, https://spang-lab.github.io/metabodecon/},   url = {https://github.com/spang-lab/metabodecon/}, }"},{"path":"https://spang-lab.github.io/metabodecon/index.html","id":"metabodecon-","dir":"","previous_headings":"","what":"Deconvolution and Alignment of 1d NMR Spectra","title":"Deconvolution and Alignment of 1d NMR Spectra","text":"framework deconvolution, alignment postprocessing 1D NMR spectra, resulting data matrix aligned signal integrals. deconvolution part uses algorithm described Koh et al. (2009). alignment part based functions ‘speaq’ package, described Beirnaert et al. (2018) Vu et al. (2011). detailed description evaluation early version package, ‘MetaboDecon1D v0.2.2’, can found Haeckl et al. (2021).","code":""},{"path":"https://spang-lab.github.io/metabodecon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deconvolution and Alignment of 1d NMR Spectra","text":"Copy paste following command running R session (e.g. RStudio):","code":"if (!\"devtools\" %in% installed.packages()[, \"Package\"]) {     install.packages(\"devtools\", repos = c(CRAN = \"https://cloud.r-project.org\")) } devtools::install_github(\"spang-lab/metabodecon\", build_manual = TRUE, build_vignettes = TRUE)"},{"path":"https://spang-lab.github.io/metabodecon/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Deconvolution and Alignment of 1d NMR Spectra","text":"Get Started can see example metabodecon can used deconvolute existing data set, followed alignment data additional postprocessing steps, resulting data matrix aligned signal integrals. Function Reference get overview functions provided metabodecon.","code":""},{"path":"https://spang-lab.github.io/metabodecon/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Deconvolution and Alignment of 1d NMR Spectra","text":"metabodecon’s documentation available spang-lab.github.io/metabodecon. includes pages Getting Started Contribution Guidelines Function Reference","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolute 1D NMR spectrum — MetaboDecon1D","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"Automatic deconvolution 1D NMR spectrum several Lorentz curves integration . NMR file needs Bruker format jcamp-dx format. Deprecated since metabodecon v1.2.0. Please use generate_lorentz_curves() instead. See examples usage.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"","code":"MetaboDecon1D(   filepath,   filename = NA,   file_format = \"bruker\",   number_iterations = 10,   range_water_signal_ppm = 0.1527692,   signal_free_region = c(11.44494, -1.8828),   smoothing_param = c(2, 5),   delta = 6.4,   scale_factor = c(1000, 1e+06),   debug = FALSE,   store_results = NULL )"},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"filepath Complete path file folder (Notice Bruker format: filepath needs spectrum folder containing one different spectra (e.g.\"C:/Users/Username/Desktop/spectra_from_bruker\")) filename Name NMR file. (Notice Bruker format: filename need name spectrum also name folder) (Default: filename = NA analyze spectra ) file_format Format (bruker jcampdx) NMR file. (Default: file_format = \"bruker\") number_iterations Number iterations approximation parameters Lorentz curves (Default: number_iterations=10) range_water_signal_ppm Half width water artefact ppm (Default: range_water_signal=0.1527692 (e.g. urine NMR spectra)) signal_free_region Row vector two entries consisting ppm positions left right border signal free region spectrum. (Default: signal_free_region=c(11.44494, -1.8828)) smoothing_param Row vector two entries consisting number smoothing repeats whole spectrum number data points (uneven) mean calculation (Default: smoothing_param=c(2,5)) delta Defines threshold value distinguish signal noise (Default: delta=6.4) scale_factor Row vector two entries consisting factor scale x-axis factor scale y-axis (Default: scale_factor=c(1000,1000000)) debug Logical value activate debug mode (Default: debug=FALSE) store_results Specifies whether lorentz curve parameters , lambda x_0 approximated spectrum stored disk (addition returning ). store_results NULL (default), user asked interactively files stored. FALSE, results stored. TRUE, results stored subdirectory R's per-session temporary directory.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"decon0 object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"Haeckl, M.; Tauber, P.; Schweda, F.; Zacharias, H.U.; Altenbuchinger, M.; Oefner, P.J.; Gronwald, W. R-Package Deconvolution Integration 1D NMR Data: MetaboDecon1D. Metabolites 2021, 11, 452. https://doi.org/10.3390/metabo11070452","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"Martina Haeckl, 2021: Initial version. Tobias Schmidt, 2024: Added parameters debug store_results. Added minor improvements pass CRAN checks.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/MetaboDecon1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deconvolute 1D NMR spectrum — MetaboDecon1D","text":"","code":"## MetaboDecon1D() is deprecated since metabodecon v1.0.0. Please use ## generate_lorentz_curves() instead, as shown below.  # DEPRECATED: if (FALSE) { # \\dontrun{ ## Requires interactive user input sim <- metabodecon_file(\"bruker/sim_subset\") sim_decon <- MetaboDecon1D(sim) sim_01_decon <- MetaboDecon1D(sim, \"sim_01\") } # }  # RECOMMENDED: sim <- metabodecon_file(\"bruker/sim_subset\") sim_decon <- generate_lorentz_curves_sim(sim, ask = FALSE) sim_01 <- file.path(sim, \"sim_01\") sim_01_decon <- generate_lorentz_curves_sim(sim_01, ask = FALSE)"},{"path":"https://spang-lab.github.io/metabodecon/reference/align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Spectra — align","title":"Align Spectra — align","text":"Align signals across   list   deconvoluted  spectra  using   'CluPA' algorithm 'speaq' package, described   Beirnaert  et  al.  (2018) doi:10.1371/journal.pcbi.1006018         Vu     et      al.      (2011) doi:10.1186/1471-2105-12-405 plus additional peak combination described combine_peaks().","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Spectra — align","text":"","code":"align(x, maxShift = 50, maxCombine = 5, verbose = FALSE)"},{"path":"https://spang-lab.github.io/metabodecon/reference/align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Spectra — align","text":"x  object   type  decons1   decons2   described  metabodecon_classes. align decons0 objects (returned now deprecated MetaboDecon1D), can use as_decons2() convert decons2 object first. maxShift Maximum number points along \"ppm-axis\" value can   moved   'speaq' package. 50 suitable starting value plasma  spectra   digital resolution 128K. Note parameter   individually optimized  depending    type   analyzed  spectra    digital resolution. urine prone chemical shift  variations  value probably increased. Passed   argument  maxShift  speaq_align(). maxCombine Amount adjacent columns may combined improving alignment. Passed argument range combine_peaks(). verbose Whether print additional information alignment process.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Spectra — align","text":"object type align described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align Spectra — align","text":"","code":"sim_dir <- metabodecon_file(\"bruker/sim\") spectra <- read_spectra(sim_dir) decons <- deconvolute(spectra, sfr = c(3.55, 3.35)) aligned <- align(decons) aligned #> aligns object with 16 align elements #> sim_01: align object (2048 dp, 3.6 to 3.3 ppm, 27 peaks) #> sim_02: align object (2048 dp, 3.6 to 3.3 ppm, 30 peaks) #> sim_03: align object (2048 dp, 3.6 to 3.3 ppm, 25 peaks) #> sim_04: align object (2048 dp, 3.6 to 3.3 ppm, 26 peaks) #> sim_05: align object (2048 dp, 3.6 to 3.3 ppm, 26 peaks) #> sim_06: align object (2048 dp, 3.6 to 3.3 ppm, 24 peaks) #> sim_07: align object (2048 dp, 3.6 to 3.3 ppm, 29 peaks) #> sim_08: align object (2048 dp, 3.6 to 3.3 ppm, 26 peaks) #> sim_09: align object (2048 dp, 3.6 to 3.3 ppm, 28 peaks) #> sim_10: align object (2048 dp, 3.6 to 3.3 ppm, 35 peaks) #> sim_11: align object (2048 dp, 3.6 to 3.3 ppm, 29 peaks) #> sim_12: align object (2048 dp, 3.6 to 3.3 ppm, 28 peaks) #> sim_13: align object (2048 dp, 3.6 to 3.3 ppm, 25 peaks) #> sim_14: align object (2048 dp, 3.6 to 3.3 ppm, 27 peaks) #> sim_15: align object (2048 dp, 3.6 to 3.3 ppm, 29 peaks) #> sim_16: align object (2048 dp, 3.6 to 3.3 ppm, 28 peaks)"},{"path":"https://spang-lab.github.io/metabodecon/reference/as_metabodecon_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a Metabodecon Class — as_metabodecon_class","title":"Convert to a Metabodecon Class — as_metabodecon_class","text":"Convert object Metabodecon class.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/as_metabodecon_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a Metabodecon Class — as_metabodecon_class","text":"","code":"as_spectrum(x, sf = c(1000, 1e+06))  as_ispec(x, sf = c(1000, 1e+06))  as_idecon(x)  as_decon0(x, sf = NULL, spectrum = NULL, optional = TRUE)  as_decon1(   x,   sf = c(1000, 1e+06),   spectrum = NULL,   sfr = NULL,   wshw = NULL,   bwc = 2 )  as_decon2(   x,   sf = c(1000, 1e+06),   spectrum = NULL,   sfr = NULL,   wshw = NULL,   bwc = 2 )  as_spectra(   x,   file_format = \"bruker\",   expno = 10,   procno = 10,   raw = FALSE,   silent = TRUE,   force = FALSE )  as_ispecs(x, sf = c(1000, 1e+06))  as_idecons(x)  as_decons0(x, sfs = list(c(1000, 1e+06)), spectra = list(NULL), nworkers = 1)  as_decons1(   x,   sfs = list(c(1000, 1e+06)),   spectra = list(NULL),   sfrs = list(NULL),   wshws = list(NULL),   bwc = 2,   nworkers = 1 )  as_decons2(   x,   sfs = list(c(1000, 1e+06)),   spectra = list(NULL),   sfrs = list(NULL),   wshws = list(NULL),   bwc = 2,   nworkers = 1 )"},{"path":"https://spang-lab.github.io/metabodecon/reference/as_metabodecon_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a Metabodecon Class — as_metabodecon_class","text":"x object convert. sf Scale factor. required x decon0 object. spectrum, spectra spectrum/spectra object corresponding x returned read_spectrum() / read_spectra. required x decon0 object. optional Logical. TRUE, two optional elements signal_free_region range_water_signal_ppm included returned decon0 object. sfr, sfrs sfr vector specifying borders signal free region. sfrs list vectors. required x decon0 object element signal_free_region missing (decons0 objected containing decon0 objects). wshw, wshws wshw specify half width water signal region. wshws list values. required x decon0 object element range_water_signal_ppm missing (decons0 objected containing decon0 objects). bwc Level backwards compatibility. bwc == 0, bug fixes introduced version 0.2.2 Metabodecon used. bwc == 1, new features introduced version 0.2.2 Metabodecon (e.g. faster algorithms) used. bwc == 2, bug fixes features introduced version 0.2.2 used. Support bwc == 0 removed 'metabodecon v2.0'. file_format file_format spectrum file. E.g. \"bruker\" \"jcampdx\". expno, procno experiment/processing number file. E.g. \"10\". relevant file_format equals \"bruker\". details see section File Structure metabodecon FAQ. raw FALSE, scales returned signal intensities based information available spectrum metadata, particular NC_proc. details see processing-reference.pdf, available https://www.bruker.com/en.html section 'Services & Support > Documentation & Manuals > Magnetic Resonance > Acquisition & Processing > TopSpin Processing Commands Parameters' (requires login). silent TRUE, output printed console. force TRUE, try continue encountering errors print info messages instead. hide messages well, set silent = TRUE. sfs List scale factors. required x list decon0 objects. nworkers Number workers parallel processing.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/as_metabodecon_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a Metabodecon Class — as_metabodecon_class","text":"object specified class.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/as_metabodecon_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a Metabodecon Class — as_metabodecon_class","text":"","code":"dirpath <- metabodecon_file(\"sim_subset\") spectra <- read_spectra(dirpath) spectrum <- spectra[[1]] decons1 <- generate_lorentz_curves_sim(spectra) decon1 <- generate_lorentz_curves_sim(spectrum) decon2 <- as_decon2(decon1)"},{"path":"https://spang-lab.github.io/metabodecon/reference/calculate_lorentz_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","title":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","text":"Calculates lorentz curves investigated spectrum. Martina Haeckl, 2021: Initial version. Tobias Schmidt, 2024: Minor updates pass CRAN checks","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/calculate_lorentz_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","text":"","code":"calculate_lorentz_curves(deconv_result, number_of_files = NA)"},{"path":"https://spang-lab.github.io/metabodecon/reference/calculate_lorentz_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","text":"deconv_result list returned generate_lorentz_curves() MetaboDecon1D. number_of_files Number spectra analyze","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/calculate_lorentz_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","text":"deconv_result holds result single deconvolution, matrix containing generated Lorentz curves returned, row depicts one Lorentz curve. deconv_result list deconvoluted spectra, list matrices returned.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/calculate_lorentz_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate lorentz curves for each analyzed spectrum — calculate_lorentz_curves","text":"","code":"## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- ## Deconvolute the spectra in folder \"bruker/sim_subset\" into a list of ## Lorentz Curves (specified via the parameters A, lambda and x_0). ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- sim <- metabodecon_file(\"bruker/sim_subset\") decons <- generate_lorentz_curves_sim(sim) decon0 <- decons[[1]]  ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- ## Calculate the corresponding y values at each ppm value for each Lorentz ## Curve. I.e. you get a matrix of dimension n x m for each deconvolution, ## where n is the number of Lorentz Curves and m is the number of ppm values. ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- yy <- calculate_lorentz_curves(decons) y1 <- yy[[1]] dim(y1) #> [1]   27 2048  ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- ## Visualize the 5th, 9th and 11th Lorentz curve. ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- nrs <- c(5, 9, 11) col <- c(\"red\", \"blue\", \"orange\") desc <- paste(\"Lorentz curve\", nrs) plot(decon0$x_values_ppm, decon0$y_values, type = \"l\", lty = 2) for (i in 1:3) lines(decon0$x_values_ppm, y1[nrs[i], ], col = col[i]) legend(\"topright\", legend = desc, col = col, lty = 1)"},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Peaks — combine_peaks","title":"Combine Peaks — combine_peaks","text":"Even calling speaq_align(), alignment individual signals always perfect, 'speaq' performs segment-wise alignment .e. groups signals aligned. improvements, partly filled neighboring columns merged.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Peaks — combine_peaks","text":"","code":"combine_peaks(   shifted_mat = speaq_align(),   range = 5,   lower_bound = 1,   spectrum_data = NULL,   data_path = NULL )"},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Peaks — combine_peaks","text":"shifted_mat matrix returned speaq_align(). range Amount adjacent columns permitted used improving alignment. lower_bound Minimum amount non-zero elements per column trigger alignment improvement. spectrum_data list deconvoluted spectra returned generate_lorentz_curves() used generate shifted_mat. longer required since version 1.2 Metabodecon. data_path NULL, returned dataframes long short written data_path \"aligned_res_long.csv\" \"aligned_res_short.csv\".","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Peaks — combine_peaks","text":"list containing two data frames long short. first data frame contains one one column data point original spectrum. second data frame contains columns least one entry non-zero.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Peaks — combine_peaks","text":"Example function :   becomes   .e. column 3 4 get merged, range common non-zero entries.","code":"|            | 3.56 | 3.54 | 3.51 | 3.51 | 3.50 | |----------- |------|------|------|------|------| | Spectrum 1 | 0.13 | 0    | 0.11 | 0    | 0    | | Spectrum 2 | 0.13 | 0    | 0.12 | 0    | 0    | | Spectrum 3 | 0.07 | 0    | 0    | 0    | 0    | | Spectrum 4 | 0.08 | 0    | 0    | 0.07 | 0    | | Spectrum 5 | 0.04 | 0    | 0.04 | 0    | 0    | |            | 3.56 | 3.54 | 3.51 | 3.50 | |----------- |------|------|------|------| | Spectrum 1 | 0.13 | 0    | 0.11 | 0    | | Spectrum 2 | 0.13 | 0    | 0.12 | 0    | | Spectrum 3 | 0.07 | 0    | 0    | 0    | | Spectrum 4 | 0.08 | 0    | 0.07 | 0    | | Spectrum 5 | 0.04 | 0    | 0.04 | 0    |"},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine Peaks — combine_peaks","text":"Initial version Wolfram Gronwald. Refactored Tobias Schmidt 2024.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/combine_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Peaks — combine_peaks","text":"","code":"sim_subset <- metabodecon_file(\"bruker/sim_subset\") spectrum_data <- generate_lorentz_curves_sim(sim_subset) shifted_mat <- speaq_align(spectrum_data = spectrum_data, verbose = FALSE) range <- 5 lower_bound <- 1 obj <- combine_peaks(shifted_mat, range, lower_bound) str(obj) #> List of 2 #>  $ short: num [1:2, 1:35] 0.000497 0.011831 0.190204 0.186337 0.003531 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:35] \"3.5081\" \"3.50165\" \"3.497\" \"3.49475\" ... #>  $ long : num [1:2, 1:2048] 0 0 0 0 0 0 0 0 0 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:2048] \"3.59\" \"3.58985\" \"3.5897\" \"3.58955\" ..."},{"path":"https://spang-lab.github.io/metabodecon/reference/convert_pos.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from unit A to unit B — convert_pos","title":"Convert from unit A to unit B — convert_pos","text":"Converts positions/widths unit unit B. direction units  B reversed, width's sign reversed well. keep  widths strictly positive, wrap result abs().","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/convert_pos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from unit A to unit B — convert_pos","text":"","code":"convert_pos(xa, ya, yb)  convert_width(xa, ya, yb)"},{"path":"https://spang-lab.github.io/metabodecon/reference/convert_pos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from unit A to unit B — convert_pos","text":"xa numeric vector specifying widths/positions unit . ya, yb numeric vector specifying positions least two points unit / unit B.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/convert_pos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from unit A to unit B — convert_pos","text":"numeric vector values converted unit unit B.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/convert_pos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from unit A to unit B — convert_pos","text":"","code":"ya <- c(244, 246, 248, 250, 252) yb <- c(15, 10, 5, 0, -5) convert_width(c(2, 4, 8), ya, yb) #> [1]  -5 -10 -20 convert_pos(c(247, 249), ya, yb) #> [1] 7.5 2.5"},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":null,"dir":"Reference","previous_headings":"","what":"Return path to metabodecon's data directory — datadir","title":"Return path to metabodecon's data directory — datadir","text":"Returns path directory download_example_datasets() stores metabodecon's example data sets file within directory. default directory subdirectory R's temporary session directory. persistent set TRUE, directory equals data directory returned tools::R_user_dir() instead.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return path to metabodecon's data directory — datadir","text":"","code":"datadir(file = NULL, warn = TRUE, persistent = NULL)"},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return path to metabodecon's data directory — datadir","text":"file Relative path file within data directory. warn Print warning message requested path yet exist? persistent Return path persistent data directory instead temporary one?","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return path to metabodecon's data directory — datadir","text":"Path data directory file within .","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return path to metabodecon's data directory — datadir","text":"decision use temporary data dir default persistent one optionally made conform CRAN package policies, state :   Source: cran.r-project.org/web/packages/policies.","code":"Packages should not write in the user's home filespace (including clipboards), nor anywhere else on the file system apart from the R session's temporary directory \\[...\\] Limited exceptions may be allowed in interactive sessions if the package obtains confirmation from the user. For R version 4.0 or later \\[...\\] packages may store user-specific data, configuration and cache files in their respective user directories obtained from [tools::R_user_dir()] \\[...\\]."},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return path to metabodecon's data directory — datadir","text":"","code":"# Get temporary datadir and persistent datadir datadir(persistent = FALSE, warn = FALSE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/data\" datadir(persistent = TRUE,  warn = FALSE) #> [1] \"/home/runner/.local/share/R/metabodecon\"  # Get persistent datadir if existing else temp datadir. Set `warn = TRUE` # to raise a warning if none of the directories exist yet. datadir(warn = FALSE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/data\" if (interactive()) datadir()  # Get PERSISTENT_DATADIR/bruker if existing else TEMP_DATADIR/bruker datadir(file = \"bruker/urine\", warn = FALSE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/data/bruker/urine\""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_persistent.html","id":null,"dir":"Reference","previous_headings":"","what":"Persistent Data Directory — datadir_persistent","title":"Persistent Data Directory — datadir_persistent","text":"Returns path persistent data directory metabodecon's data sets stored. directory equals data directory returned tools::R_user_dir() plus additional path normalization.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_persistent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persistent Data Directory — datadir_persistent","text":"","code":"datadir_persistent()"},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_persistent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Persistent Data Directory — datadir_persistent","text":"Path persistent data directory.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_persistent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Persistent Data Directory — datadir_persistent","text":"","code":"datadir_persistent() #> [1] \"/home/runner/.local/share/R/metabodecon\""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporary Data Directory — datadir_temp","title":"Temporary Data Directory — datadir_temp","text":"Returns path temporary data directory metabodecon's data sets stored. directory equals subdirectory 'data' metabodecons temporary session directory tmpdir() plus additional path normalization.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporary Data Directory — datadir_temp","text":"","code":"datadir_temp()"},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporary Data Directory — datadir_temp","text":"Returns path temporary data directory.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/datadir_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporary Data Directory — datadir_temp","text":"","code":"datadir_temp() #> [1] \"/tmp/RtmpZmBgKX/metabodecon/data\""},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":null,"dir":"Reference","previous_headings":"","what":"Deconvolute one or more NMR spectra — deconvolute","title":"Deconvolute one or more NMR spectra — deconvolute","text":"Deconvolutes NMR spectra modeling detected signal within spectrum Lorentz Curve.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deconvolute one or more NMR spectra — deconvolute","text":"","code":"deconvolute(   x,   nfit = 3,   smopts = c(2, 5),   delta = 6.4,   sfr = NULL,   wshw = 0,   ask = FALSE,   force = FALSE,   verbose = FALSE,   nworkers = 1 )  generate_lorentz_curves(   data_path,   file_format = \"bruker\",   make_rds = FALSE,   expno = 10,   procno = 10,   raw = TRUE,   nfit = 10,   smopts = c(2, 5),   delta = 6.4,   sfr = c(11.44494, -1.8828),   wshw = 0.1527692,   ask = TRUE,   force = FALSE,   verbose = TRUE,   nworkers = 1 )  generate_lorentz_curves_sim(   data_path,   file_format = \"bruker\",   make_rds = FALSE,   expno = 10,   procno = 10,   raw = TRUE,   nfit = 10,   smopts = c(2, 5),   delta = 6.4,   sfr = c(3.55, 3.35),   wshw = 0,   ask = FALSE,   force = FALSE,   verbose = FALSE,   nworkers = 1 )"},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deconvolute one or more NMR spectra — deconvolute","text":"x spectrum spectra object described metabodecon_classes. nfit Integer. Number iterations approximating parameters Lorentz curves. See 'Details'. smopts Numeric vector two entries: number smoothing iterations number data points use smoothing (must odd). See 'Details'. delta Threshold peak filtering. Higher values result peaks filtered . peak filtered score \\(\\mu + \\sigma \\cdot \\delta\\), \\(\\mu\\) average peak score signal-free region (SFR), \\(\\sigma\\) standard deviation peak scores SFR. See 'Details'. sfr Numeric vector two entries: ppm positions left right border signal-free region spectrum. See 'Details'. wshw Half-width water artifact ppm.  See 'Details'. ask Logical. Whether ask user input deconvolution process. FALSE, provided default values used. force FALSE, function stops error message peaks found signal free region (SFR), peaks required reference peak filtering. TRUE, function instead proceeds without peak filtering, potentially increasing runtime memory usage significantly. verbose Logical. Whether print log messages deconvolution process. nworkers Number workers use parallel processing. \"auto\", number workers determined automatically. number greater 1, limited number spectra. data_path Either path directory containing measured NMR spectra, dataframe returned read_spectrum(), list dataframes. file_format file_format spectrum file. E.g. \"bruker\" \"jcampdx\". make_rds Logical character. TRUE, stores results RDS file disk. character string, saves RDS file specified name. set TRUE many spectra evaluated decrease computation time. expno, procno experiment/processing number file. E.g. \"10\". relevant file_format equals \"bruker\". details see section File Structure metabodecon FAQ. raw FALSE, scales returned signal intensities based information available spectrum metadata, particular NC_proc. details see processing-reference.pdf, available https://www.bruker.com/en.html section 'Services & Support > Documentation & Manuals > Magnetic Resonance > Acquisition & Processing > TopSpin Processing Commands Parameters' (requires login).","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deconvolute one or more NMR spectra — deconvolute","text":"'decon2' object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deconvolute one or more NMR spectra — deconvolute","text":"First, automated curvature based signal selection performed. signal represented 3 data points allow determination initial Lorentz curves. Lorentz curves iteratively adjusted optimally approximate measured spectrum. generate_lorentz_curves_sim() identical generate_lorentz_curves() except defaults, optimized deconvoluting 'Sim' dataset, shipped 'metabodecon'. 'Sim' dataset simulated dataset, much smaller real NMR spectra lacks water signal. makes ideal use examples default value functions. However, default values sfr, wshw, delta \"normal\" generate_lorentz_curves() function optimal dataset. avoid define optimal parameters repeatedly examples, function provided deconvolute \"Sim\" dataset suitable parameters. generate_lorentz_curves() parameters nfit, smopts, delta, sfr wshw must fully specified. deconvolute(), parameters can set NULL (default value). case, function try determine optimal values parameters automatically. values chosen stored field args returned decon2 object.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/deconvolute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deconvolute one or more NMR spectra — deconvolute","text":"","code":"## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ ## Define the paths to the example datasets we want to deconvolute: ## `sim_dir`: directory containing 16 simulated spectra ## `sim_01`: path to the first spectrum in the `sim` directory ## `sim_01_spec`: the first spectrum in the `sim` directory as a dataframe ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ sim_dir <- metabodecon_file(\"sim_subset\") sim_1_dir <- file.path(sim_dir, \"sim_01\") sim_2_dir <- file.path(sim_dir, \"sim_02\") sim_1_spectrum <- read_spectrum(sim_1_dir) sim_2_spectrum <- read_spectrum(sim_2_dir) sim_spectra <- read_spectra(sim_dir)  ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ ## Show that `generate_lorentz_curves()` and `generate_lorentz_curves_sim()` ## produce the same results: ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ sim_1_decon0 <- generate_lorentz_curves(     data_path = sim_1_dir, # Path to directory containing spectra     sfr = c(3.55, 3.35), # Borders of signal free region (SFR) in ppm     wshw = 0, # Half width of water signal (WS) in ppm     ask = FALSE, # Don't ask for user input     verbose = FALSE # Suppress status messages ) sim_1_decon1 <- generate_lorentz_curves_sim(sim_1_dir) stopifnot(all.equal(sim_1_decon0, sim_1_decon1))  ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ ## Show that passing a spectrum produces the same results as passing the ## the corresponding directory: ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ decon_from_spectrum_dir <- generate_lorentz_curves_sim(sim_1_dir) decon_from_spectrum_obj <- generate_lorentz_curves_sim(sim_1_spectrum) decons_from_spectra_obj <- generate_lorentz_curves_sim(sim_spectra) decons_from_spectra_dir <- generate_lorentz_curves_sim(sim_dir)  most.equal <- function(x1, x2) {     ignore <- which(names(x1) %in% c(\"number_of_files\", \"filename\"))     equal <- all.equal(x1[-ignore], x2[-ignore])     invisible(stopifnot(isTRUE(equal))) }  all.equal(  decon_from_spectrum_dir, decon_from_spectrum_obj     ) #> [1] TRUE all.equal(  decons_from_spectra_dir, decons_from_spectra_obj     ) #> [1] TRUE most.equal( decon_from_spectrum_dir, decons_from_spectra_obj[[1]]) most.equal( decon_from_spectrum_dir, decons_from_spectra_dir[[1]])  ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ ## Below example uses data from a real NMR experiment, instead of (small) ## simulated datasets and therefor requires multiple seconds to run. Because ## `ask` is TRUE in this example (the default value), the user will be asked ## for input during the deconvolution. To avoid this, set `ask = FALSE`. ## -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ if (FALSE) { # \\dontrun{ example_datasets <- download_example_datasets() urine_1 <- file.path(example_datasets, \"bruker/urine/urine_1\") decon_urine_1 <- generate_lorentz_curves(urine_1) } # }"},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Based Peak Alignment — dohCluster","title":"Cluster Based Peak Alignment — dohCluster","text":"Rewrite speaq::dohCluster(), compatible data format returned 'generate_lorentz_curves()' 'gen_feat_mat()'. function name \"dohCluster\" comes \"Hierarchical Clustering\" part Alignment algorithm proposed Vu et al. (2011) doi:10.1186/1471-2105-12-405.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Based Peak Alignment — dohCluster","text":"","code":"dohCluster(   X,   peakList,   refInd = 0,   maxShift = 100,   acceptLostPeak = TRUE,   verbose = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Based Peak Alignment — dohCluster","text":"X Dataframe signal intensities spectra returned gen_feat_mat(). peakList List peak indices returned gen_feat_mat(). refInd Number reference spectrum .e. spectrum signals aligned . maxShift Maximum number points value can moved. acceptLostPeak Whether allow alignment algorithm ignore peaks easily aligned reference spectrum. verbose Whether print additional information alignment process.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Based Peak Alignment — dohCluster","text":"list containing two data frames Y new_peakList. first one contains aligned spectra, second one contains aligned signals spectrum.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cluster Based Peak Alignment — dohCluster","text":"Initial version Wolfram Gronwald. Refactored Tobias Schmidt 2024.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/dohCluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Based Peak Alignment — dohCluster","text":"","code":"sim_subset <- metabodecon_file(\"bruker/sim_subset\") decons <- generate_lorentz_curves_sim(sim_subset) feat <- gen_feat_mat(decons) refObj <- speaq::findRef(feat$peakList) hclObj <- dohCluster(      X = feat$data_matrix,      peakList = feat$peakList,      refInd = refObj$refInd,      maxShift = 100,      acceptLostPeak = TRUE,      verbose = TRUE ) #>  #>  -------------------------------- #>  dohCluster will run with maxShift= 100 #>  If you want dohCluster to detect the optimal maxShift automatically, #>  use dohCluster(..., maxShift = NULL, ...) #>  -------------------------------- #>  #>  aligning spectrum  1 #>  Median pearson correlation of aligned spectra: 0.9977171 #>  Alignment time:  2e-04  minutes str(hclObj, 1) #> List of 2 #>  $ Y           : num [1:2, 1:2048] 0.0122 0.0105 0.0122 0.0106 0.0122 ... #>  $ new_peakList:List of 2"},{"path":"https://spang-lab.github.io/metabodecon/reference/download_example_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Download metabodecon Example Datasets — download_example_datasets","title":"Download metabodecon Example Datasets — download_example_datasets","text":"Downloads example datasets can used test functionality metabodecon package. datasets included package default due size constraints. datasets downloaded zip file extracted automatically, unless extraction disabled user.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/download_example_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download metabodecon Example Datasets — download_example_datasets","text":"","code":"download_example_datasets(   dst_dir = NULL,   extract = TRUE,   persistent = NULL,   overwrite = FALSE,   silent = FALSE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/download_example_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download metabodecon Example Datasets — download_example_datasets","text":"dst_dir destination directory downloaded datasets stored. NULL, function return path cached zip file. extract Logical. TRUE, downloaded zip file extracted. persistent Logical. TRUE, downloaded datasets cached datadir_persistent() speed future calls download_example_datasets(). FALSE, datasets cached datadir_temp(). NULL, function check paths cached datasets return datadir_temp() cached file yet exist. overwrite Logical. TRUE, existing files name destination directory overwritten. silent Logical. TRUE, output printed console.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/download_example_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download metabodecon Example Datasets — download_example_datasets","text":"path downloaded (possibly extracted) datasets.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/download_example_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download metabodecon Example Datasets — download_example_datasets","text":"","code":"if (interactive()) {      zip <- download_example_datasets(extract = FALSE, persistent = FALSE)      dir <- download_example_datasets(extract = TRUE) }"},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Spectrum — draw_spectrum","title":"Draw Spectrum — draw_spectrum","text":"Draws single spectrum.  Internally  used   plot_spectrum(),   usually   recommended  way   plot  spectra.   usage  examples  see test/testthat/test-draw_spectrum.R.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Spectrum — draw_spectrum","text":"","code":"draw_spectrum(   obj,   foc_rgn = NULL,   foc_frac = NULL,   foc_only = TRUE,   add = FALSE,   fig_rgn = NULL,   main = NULL,   show = TRUE,   show_d2 = FALSE,   truepar = NULL,   mar = c(4.1, 5.1, 0.1, 0.1),   si_line = list(),   sm_line = list(),   sp_line = list(),   d2_line = list(),   lc_lines = list(),   tp_lines = list(),   cent_pts = list(),   bord_pts = list(),   norm_pts = list(),   bg_rect = list(),   foc_rect = list(),   lc_rects = list(),   tp_rects = list(),   bt_axis = list(),   lt_axis = list(),   tp_axis = list(),   rt_axis = list(),   tp_verts = list(),   lc_verts = list(),   lgd = list() )"},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Spectrum — draw_spectrum","text":"obj object type spectrum decon2. details see metabodecon_classes. foc_rgn Numeric vector specifying start end focus region ppm. foc_frac Numeric vector specifying start end focus region fraction full spectrum width. foc_only Logical. TRUE, focused region drawn. FALSE, full spectrum drawn. add TRUE, draw currently open figure. FALSE, start new figure. fig_rgn Drawing region normalized device coordinates vector form c(x1, x2, y1, y2). main Main title plot. Drawn via title(). show Logical. FALSE, function returns without anything. show_d2 Logical. TRUE, second derivative spectrum drawn. Setting TRUE changes defaults drawing, e.g. disabling drawing anything related signal intensities changing y-axis label \"Second Derivative\". truepar Data frame columns x0, lambda containing true lorentzian used simulate spectrum. Required tp_* argument set. mar Number lines /left-//right-plot region. si_line, sm_line, lc_lines, sp_line, d2_line, tp_lines List   parameters  passed   lines()   drawing   raw signal intensities, smoothed signal intensities, lorentzian curves found deconvolution, superposition lorentzian curves, second derivative /true lorentzian curves. cent_pts, bord_pts, norm_pts List parameters passed points() drawing peak center  points, peak border points non-peak points. bg_rect, lc_rects, foc_rect, tp_rects List parameters passed rect() drawing background, lorentzian curve substitutes, focus rectangle /true lorentzian curve substitutes. bt_axis, lt_axis, tp_axis, rt_axis List parameters used overwrite default values  passed   axis() drawing bottom, left,  top   right  axis.   addition   parameters axis(), following additional parameters supported  well: text:   Description axis. Drawn via mtext(). n:      Number tickmarks. digits: Number digits rounding labels. vector numbers provided, numbers tried, n unique labels found. See 'Details'. sf:     Scaling factor. Axis values divided number labels calculated. set anything unequal 1, also choose text way reflects scaling. E.g. set sf = 1e6 change text \"Signal Intensity [au]\" \"Signal Intensity [Mau]\" \"Signal Intensity [au] / 1e6\", \"Mau\" meaning \"Mega-Arbitrary-Units\". lc_verts, tp_verts List parameters passed abline() drawing vertical lines centers estimated lorentzian curves /true lorentzian curves. Setting tp_verts$show TRUE requires truepar set. lgd List parameters passed legend() drawing legend.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Spectrum — draw_spectrum","text":"NULL. Called side effect plotting.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw Spectrum — draw_spectrum","text":"Parameters bt_axis, lt_axis, tp_axis rt_axis  support  option n digits, n = 5 means \"Draw 5 tickmarks   full  axis range\" digits = 3 means \"round label shown beside tickmark  3 digits\". n omitted, suitable value chosen automatically using axTicks(). digits omitted, default 2:12 used. Providing vector digits causes digit tried argument   round(), digit encountered results n unique labels. Example: Assume n = 4 corresponding  calculated  tickmark  positions : 1.02421, 1.02542, 1.02663 1.02784. provide digits = 1:5, following roundings tried: example process stop digit = 3,   point n = 4 unique labels (1.024, 1.025, 1.027 1.028).","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/draw_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Spectrum — draw_spectrum","text":"","code":"decon <- deconvolute(sim[[1]], sfr = c(3.55, 3.35)) draw_spectrum(obj = decon)  #> $plt_rgn_ndc #> [1] 0.1457143 0.9971429 0.1171429 0.9971429 #>  #> $foc_rgn_ndc #> [1] 0.9977677 0.1450895 0.1171429 0.9971429 #>  draw_spectrum(obj = decon, lgd = list(x = \"top\", bg = NA))  #> $plt_rgn_ndc #> [1] 0.1457143 0.9971429 0.1171429 0.9971429 #>  #> $foc_rgn_ndc #> [1] 0.9977677 0.1450895 0.1171429 0.9971429 #>  draw_spectrum(obj = decon, foc_rgn = c(3.45, 3.37)) #> $plt_rgn_ndc #> [1] 0.1457143 0.9971429 0.1171429 0.9971429 #>  #> $foc_rgn_ndc #> [1] 0.9982098 0.1446473 0.1171429 0.9971429 #>  draw_spectrum(obj = decon, fig = c(0.1, 0.4, 0.30, 0.45), add = TRUE)  #> $plt_rgn_ndc #> [1] 0.2457143 0.3971429 0.4171429 0.4471429 #>  #> $foc_rgn_ndc #> [1] 0.3972540 0.2456032 0.4171429 0.4471429 #>  draw_spectrum(obj = decon, fig = c(0.1, 0.4, 0.05, 0.20), add = FALSE)  #> $plt_rgn_ndc #> [1] 0.2457143 0.3971429 0.1671429 0.1971429 #>  #> $foc_rgn_ndc #> [1] 0.3972540 0.2456032 0.1671429 0.1971429 #>  draw_spectrum(obj = decon, lc_lines = NULL, lc_rects = NULL, foc_only = FALSE)  #> $plt_rgn_ndc #> [1] 0.1457143 0.9971429 0.1171429 0.9971429 #>  #> $foc_rgn_ndc #> [1] 0.6778571 0.4650000 0.1171429 0.8285104 #>"},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression with predefined global state — evalwith","title":"Evaluate an expression with predefined global state — evalwith","text":"Evaluates expression predefined global state, including : working directory (set via setwd()) global options (set via options()) graphical parameters (set via par()) addition , evalwith allows : Redirect capture output /message stream via sink() Measure runtime evaluated expression via system.time() Creating temporary test directory (inside tmpdir()) populating input files according inputs Predefine answers calls readline() happening evaluation expr Caching result expression changes global state reverted expression evaluated.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression with predefined global state — evalwith","text":"","code":"evalwith(   expr,   testdir = NULL,   answers = NULL,   output = NULL,   message = NULL,   plot = NULL,   datadir_temp = c(\"default\", \"missing\", \"empty\", \"filled\")[1],   datadir_persistent = c(\"default\", \"missing\", \"empty\", \"filled\")[1],   inputs = character(),   opts = NULL,   pars = NULL,   cache = FALSE,   overwrite = FALSE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression with predefined global state — evalwith","text":"expr Expression evaluated. testdir ID test directory. E.g. \"xyz/2\". created populated inputs. clear, use clear(testdir(\"xyz/2\")). answers Answers returned readline(). output Path file output stream redirected . Use \"captured\" capture output. message Path file message stream redirected . Use \"captured\" capture messages. plot expression opening device, string \"captured\" path ending \".pdf\", \".svg\", \".png\". Examples: svg(\"tmp.svg\"), quote(pdf(\"tmp.pdf\")), \"captured\", \"tmp.png\". Passing \"captured\" equivalent passing tempfile(fileext = \".png\"). datadir_temp State mocked temporary data directory. See details section. datadir_persistent State mocked persistent data directory. See details section. inputs Paths copied test directory evaluating expr. opts Named list options set. See options(). pars Named list parameters set. See par(). cache Logical indicating whether cache result expression. overwrite Logical indicating whether overwrite cache file already exists.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression with predefined global state — evalwith","text":"list containing following elements: rv: return value expression. runtime: \"elapsed\" runtime expression seconds. Measured system.time(). output: captured output. message: captured messages. plot: path saved plot. testdir: path test directory. inputs: paths copied input files.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate an expression with predefined global state — evalwith","text":"datadir_temp datadir_persistent arguments accept values \"missing\", \"filled\" \"empty\". Setting value unequal NULL causes functions datadir_temp() /datadir_persistent() replaced mock functions pointing fake directories. Functions depending functions use fake directories instead real ones. set \"missing\" returned mock directory exist. set \"empty\" exists guaranteed empty. set \"filled\", populated example datasets. Attention: mocked functions, .e. datadir_temp() datadir_persistent() used directly inside expr called via devtools::test(). sure , seems devtools /testthat copies functions used expression evaluated.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/evalwith.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an expression with predefined global state — evalwith","text":"","code":"x1 <- evalwith(output = \"captured\", cat(\"Helloworld\\n\")) str(x1) #> List of 7 #>  $ rv     : NULL #>  $ runtime: num 0 #>  $ output : chr \"Helloworld\" #>  $ message: chr(0)  #>  $ plot   : NULL #>  $ testdir: NULL #>  $ inputs : chr(0)   x2 <- evalwith(datadir_persistent = \"missing\", message = \"captured\", datadir()) #> Warning: /tmp/RtmpZmBgKX/metabodecon/data does not exist. Please call `download_example_datasets()` first. str(x2) #> List of 7 #>  $ rv     : chr \"/tmp/RtmpZmBgKX/metabodecon/data\" #>  $ runtime: num 0.001 #>  $ output : chr(0)  #>  $ message: chr(0)  #>  $ plot   : NULL #>  $ testdir: NULL #>  $ inputs : chr(0)   x3 <- evalwith(testdir = \"dummy\", inputs = \"bruker/urine/urine_1\", dir()) str(x3) #> List of 7 #>  $ rv     : chr \"urine_1\" #>  $ runtime: num 0 #>  $ output : chr(0)  #>  $ message: chr(0)  #>  $ plot   : NULL #>  $ testdir: chr \"dummy\" #>  $ inputs : chr \"bruker/urine/urine_1\"  x4 <- evalwith(Sys.sleep(0.02)) str(x4) #> List of 7 #>  $ rv     : NULL #>  $ runtime: num 0.02 #>  $ output : chr(0)  #>  $ message: chr(0)  #>  $ plot   : NULL #>  $ testdir: NULL #>  $ inputs : chr(0)"},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Feature Matrix. — gen_feat_mat","title":"Generate Feature Matrix. — gen_feat_mat","text":"Generate feature matrix.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Feature Matrix. — gen_feat_mat","text":"","code":"gen_feat_mat(   data_path,   ppm_range = get_ppm_range(data_path),   si_size_real_spectrum = length(data_path$y_values),   scale_factor_x = 1000,   warn = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Feature Matrix. — gen_feat_mat","text":"data_path list deconvoluted spectra returned generate_lorentz_curves(). older versions, also path passed generate_lorentz_curves(), deprecated trigger warning. See 'Details' information. ppm_range ppm range signals distributed. si_size_real_spectrum Number data points spectra. scale_factor_x x scale factor used deconvolution. warn Whether print warning case file path passed data_path instead list deconvoluted spectra.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Feature Matrix. — gen_feat_mat","text":"list following elements: data_matrix: data.frame row corresponds one spectrum column one data point, .e. 10 input spectra 131072 data points data_matrix dimensions 10 x 131072. peakList: list vectors, vector contains indices peaks corresponding spectrum. indices increase left right, .e. smallest index corresponds highest ppm value, ppm values decrease left right. w: list vectors vector contains \"position parameter\" peaks corresponding spectrum. : list vectors vector contains \"area parameter\" peaks corresponding spectrum. lambda: list vectors vector contains \"width parameter\" peaks corresponding spectrum.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Feature Matrix. — gen_feat_mat","text":"version 1.2 'metabodecon', deconvolution functions generate_lorentz_curves MetaboDecon1D wrote output partially txt files input folder. Back , gen_feat_mat() used txt files input generate feature matrix. Since version 1.2 txt files longer created default, prevent accidental modifications input folders. Therefore, recommended way pass required information gen_feat_mat() directly pass output generate_lorentz_curves() gen_feat_mat(). However, stay backwards compatible, name parameter data_path changed passing actual path data_path still possible, result warning (unless warn set FALSE).","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Feature Matrix. — gen_feat_mat","text":"Initial version Wolfram Gronwald. Refactored Tobias Schmidt 2024.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/gen_feat_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Feature Matrix. — gen_feat_mat","text":"","code":"sim_subset <- metabodecon_file(\"sim_subset\") decons <- generate_lorentz_curves_sim(sim_subset) obj <- gen_feat_mat(decons) str(obj, 2, give.attr = FALSE) #> List of 5 #>  $ data_matrix: num [1:2, 1:2048] 0.0122 0.0105 0.0122 0.0106 0.0123 ... #>  $ peakList   :List of 2 #>   ..$ sim_01: num [1:27] 486 529 560 630 702 ... #>   ..$ sim_02: num [1:30] 552 590 636 691 766 ... #>  $ w          :List of 2 #>   ..$ sim_01: num [1:27] 1.56 1.52 1.49 1.42 1.35 ... #>   ..$ sim_02: num [1:30] 1.5 1.46 1.41 1.36 1.28 ... #>  $ A          :List of 2 #>   ..$ sim_01: num [1:27] -0.000158 -0.060544 -0.001124 -0.155302 -0.019516 ... #>   ..$ sim_02: num [1:30] -0.00377 -0.05931 -0.00255 -0.14508 -0.01957 ... #>  $ lambda     :List of 2 #>   ..$ sim_01: num [1:27] -0.00713 -0.00763 -0.008 -0.00838 -0.00732 ... #>   ..$ sim_02: num [1:30] -0.01002 -0.00794 -0.01318 -0.00856 -0.00757 ..."},{"path":"https://spang-lab.github.io/metabodecon/reference/get_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve directory path of an example dataset — get_data_dir","title":"Retrieve directory path of an example dataset — get_data_dir","text":"Returns path directory storing example files shipped metabodecon. Deprecated since metabodecon v1.2.0. Please use datadir() instead. See examples usage.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve directory path of an example dataset — get_data_dir","text":"","code":"get_data_dir(dataset_name = c(\"\", \"blood\", \"test\", \"urine\"), warn = TRUE)"},{"path":"https://spang-lab.github.io/metabodecon/reference/get_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve directory path of an example dataset — get_data_dir","text":"dataset_name Either \"\", \"test\", \"blood\" \"urine\". warn Whether print warning message example folders yet exist, .e. download_example_datasets() called yet.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_data_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve directory path of an example dataset — get_data_dir","text":"Path directory storing example files.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/get_data_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve directory path of an example dataset — get_data_dir","text":"","code":"x <- get_data_dir(\"urine\")                     # Deprecated #> Warning: /tmp/RtmpZmBgKX/metabodecon/data does not exist. Please call `download_example_datasets()` first. #> Warning: /tmp/RtmpZmBgKX/metabodecon/data/example_datasets/bruker/urine does not exist. Please call `download_example_datasets(extract = TRUE)` first. y <- datadir(\"example_datasets/bruker/urine\")  # Preferred #> Warning: /tmp/RtmpZmBgKX/metabodecon/data/example_datasets/bruker/urine does not exist. Please call `download_example_datasets()` first. cat(x, y, sep = \"\\n\") #> /tmp/RtmpZmBgKX/metabodecon/data/example_datasets/bruker/urine #> /tmp/RtmpZmBgKX/metabodecon/data/example_datasets/bruker/urine"},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PPM Range covered by Spectra — get_ppm_range","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"Returns ppm range across peaks provided deconvoluted spectra.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"","code":"get_ppm_range(spectrum_data, full_range = FALSE)"},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"spectrum_data list deconvoluted spectra returned generate_lorentz_curves(). full_range TRUE, full range spectra returned. FALSE, range lowest highest peak center returned.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"vector containing lowest highest ppm value peaks provided deconvoluted spectra.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"Wolfram Gronwald, 2023: initial version. Tobias Schmidt, 2024: .","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/get_ppm_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get PPM Range covered by Spectra — get_ppm_range","text":"","code":"spectrum_data <- generate_lorentz_curves(     data_path = sim[1:2],     nfit = 3,     sfr = c(3.55, 3.35),     wshw = 0,     ask = FALSE,     verbose = FALSE ) ppm_rng <- get_ppm_range(spectrum_data) print(ppm_rng) #> [1] 3.36275 3.51725"},{"path":"https://spang-lab.github.io/metabodecon/reference/is_metabodecon_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an Object from a Metabodecon Class? — is_metabodecon_class","title":"Is an Object from a Metabodecon Class? — is_metabodecon_class","text":"Check object instance specific 'Metabodecon Class'. See metabodecon_classes list classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/is_metabodecon_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an Object from a Metabodecon Class? — is_metabodecon_class","text":"","code":"is_spectrum(x, check_class = TRUE, check_contents = FALSE)  is_ispec(x)  is_idecon(x)  is_decon0(x)  is_decon1(x)  is_decon2(x)  is_align(x)  is_spectra(   x,   check_class = TRUE,   check_contents = FALSE,   check_child_classes = FALSE )  is_ispecs(x)  is_idecons(x)  is_decons0(x)  is_decons1(x)  is_decons2(x)  is_aligns(x)"},{"path":"https://spang-lab.github.io/metabodecon/reference/is_metabodecon_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an Object from a Metabodecon Class? — is_metabodecon_class","text":"x object check. check_class Logical indicating whether check class object. check_contents Logical indicating whether check contents object. check_child_classes Logical indicating whether check class element object.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/is_metabodecon_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is an Object from a Metabodecon Class? — is_metabodecon_class","text":"","code":"ss <- sim[1:2] dd <- deconvolute(ss, sfr = c(3.55, 3.35)) aa <- align(dd) s1 <- sim[[1]] d1 <- dd[[1]] a1 <- aa[[1]]  is_spectrum(s1) # TRUE #> [1] TRUE is_spectrum(s1, check_contents = TRUE) # TRUE #> [1] TRUE is_decon0(d1) # FALSE #> [1] FALSE is_decon1(d1) # FALSE #> [1] FALSE is_decon2(d1) # TRUE #> [1] TRUE is_align(a1)  # TRUE #> [1] TRUE  is_spectra(ss) # TRUE #> [1] TRUE is_decons0(dd) # FALSE #> [1] FALSE is_decons1(dd) # FALSE #> [1] FALSE is_decons2(dd) # TRUE #> [1] TRUE is_aligns(aa)  # TRUE #> [1] TRUE"},{"path":"https://spang-lab.github.io/metabodecon/reference/make_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Spectrum Object — make_spectrum","title":"Create a Spectrum Object — make_spectrum","text":"Creates spectrum object provided signal intensities, frequencies chemical shifts.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/make_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Spectrum Object — make_spectrum","text":"","code":"make_spectrum(   si,   cs_max,   cs_width,   fq_ref,   fq_width = NULL,   force = FALSE,   silent = FALSE,   name = NULL,   path = NULL,   type = NULL,   simpar = NULL,   mfs = NULL )"},{"path":"https://spang-lab.github.io/metabodecon/reference/make_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Spectrum Object — make_spectrum","text":"si Numeric vector signal intensities, ordered highest lowest corresponding chemical shift. cs_max highest chemical shift value ppm, usually shown left end spectrum. cs_width width spectrum ppm. fq_ref reference frequency Hz. fq_width width spectrum Hz. used check whether values calculated cs_max, cs_width fq_ref match provided value. NULL, check skipped. force TRUE, function raise error case discrepancies calculated provided spectrum width Hz, print info message instead. hide message well, set silent = TRUE. silent TRUE, output printed console. name name spectrum, e.g. \"Blood 1\" \"Urine Mouse X23D\". path path spectrum file, e.g. \"/example_datasets/bruker/urine/urine_1\". type type experiment, e.g. \"H1 CPMG\" \"H1 NOESY\". simpar simulation parameters used generate spectrum. mfs magnetic field strength Tesla.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/make_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Spectrum Object — make_spectrum","text":"spectrum object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/make_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Spectrum Object — make_spectrum","text":"","code":"si <- c(1, 1, 3, 7, 8, 3, 8, 5, 2, 1) cs_max <- 14.8 cs_width <- 20.0 fq_ref <- 600.25 * 1e6 fq_width <- 12005 spectrum <- make_spectrum(si, cs_max, cs_width, fq_ref, fq_width) spectrum2 <- make_spectrum(si, cs_max, cs_width, fq_ref, fq_width = 12010, force = FALSE) #> 2025-01-15 23:50:29.29 Calculated spectrum width in Hz (12005) does not match the provided value (12010). Continuing anyways, because `force` equals `TRUE`. Please note that all downstream calculations using frequencies might be wrong, so be sure to double check the results."},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabodecon Classes — metabodecon_classes","title":"Metabodecon Classes — metabodecon_classes","text":"Metabodecon introduces set classes highlight presence  certain elements corresponding objects. order elements may vary  different  versions   Metabodecon, thus elements always accessed name, example, using x$si x[[\"cs\"]]. short description class given listing . spectrum: One NMR spectrum decon0: One deconvoluted NMR spectrum stored MetaboDecon1D() format decon1: One deconvoluted NMR spectrum stored generate_lorentz_curves() format decon2: One deconvoluted NMR spectrum stored deconvolute() format align: One aligned NMR spectrum classes mentioned represent individual objects,    single spectrum, deconvolution,   alignment.  However,    often  useful  describe collections    objects,     list   spectra  deconvolutions.  Therefore,    individual  class,    corresponding \"collection\"  class   provided.   collection  classes     named: spectra, decons0, decons1, decons2, aligns. details can found Metabodecon's online documentation spang-lab.github.io/metabodecon/articles/Metabodecon-Classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Path to File or Directory in metabodecon Package — metabodecon_file","title":"Return Path to File or Directory in metabodecon Package — metabodecon_file","text":"Recursively searches files directories within 'metabodecon' package match given name.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Path to File or Directory in metabodecon Package — metabodecon_file","text":"","code":"metabodecon_file(name = \"sim_01\")"},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Path to File or Directory in metabodecon Package — metabodecon_file","text":"name name search .","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Path to File or Directory in metabodecon Package — metabodecon_file","text":"file directory path.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/metabodecon_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Path to File or Directory in metabodecon Package — metabodecon_file","text":"","code":"# Unambiguous paths metabodecon_file(\"urine_1\") #> [1] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_1\" metabodecon_file(\"urine_1.dx\") #> [1] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/jcampdx/urine/urine_1.dx\" metabodecon_file(\"sim/sim_01\") #> [1] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/sim/sim_01\"  # Ambiguous paths (i.e. multiple matches) metabodecon_file(\"sim\") #> [1] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/sim\" metabodecon_file(\"urine\") #> [1] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine\"  #> [2] \"/home/runner/work/_temp/Library/metabodecon/example_datasets/jcampdx/urine\"  # Non-existing paths (i.e. a character vector of length zero gets returned) metabodecon_file(\"asdfasdf\") #> character(0)"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_lorentz_curves_save_as_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","title":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","text":"Plots original spectrum generated Lorentz curves save result png filepath. Superseded plot_spectrum() since metabodecon v1.2.0. replaced v2.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_lorentz_curves_save_as_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","text":"","code":"plot_lorentz_curves_save_as_png(   deconv_result,   x_range = c(),   y_range = c(),   out_dir = \".\",   ask = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_lorentz_curves_save_as_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","text":"deconv_result Saved result MetaboDecon1D() function x_range Row vector two entries consisting ppm start ppm end value scale range x-axis (optional) y_range Row vector two entries consisting ppm start ppm end value scale range y-axis (optional) out_dir Path directory png files saved. Default current working directory. ask Logical value. Whether ask confirmation user writing files disk. Default TRUE.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_lorentz_curves_save_as_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","text":"NULL, called side effects.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_lorentz_curves_save_as_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot lorentz curves for variable range — plot_lorentz_curves_save_as_png","text":"","code":"sim <- metabodecon_file(\"bruker/sim_subset\") sim_decon <- generate_lorentz_curves_sim(sim) png_dir <- tmpdir(\"sim_decon/pngs\", create = TRUE) plot_lorentz_curves_save_as_png(sim_decon, out_dir = png_dir, ask = FALSE) #> Plot Lorentz curves of sim_01 #> Plot Lorentz curves of sim_02 dir(png_dir, full.names = TRUE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_lorentz_curves.png\" #> [2] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_lorentz_curves.png\""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Spectra — plot_spectra","title":"Plot Spectra — plot_spectra","text":"Plot set deconvoluted spectra.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Spectra — plot_spectra","text":"","code":"plot_spectra(   obj,   ...,   sfy = 1e+06,   xlab = \"Chemical Shift [ppm]\",   ylab = paste(\"Signal Intensity [au] /\", sfy),   mar = c(4.1, 4.1, 1.1, 0.1) )"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Spectra — plot_spectra","text":"obj object type decons0, decons1 decons2. details see metabodecon_classes. ... Additional arguments passed conversion function. sfy Scaling factor y-axis. xlab Label x-axis. ylab Label y-axis. mar numeric vector length 4, specifies margins plot.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Spectra — plot_spectra","text":"plot deconvoluted spectra.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Spectra — plot_spectra","text":"","code":"obj <- deconvolute(sim[1:4], sfr = c(3.55, 3.35)) plot_spectra(obj)"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Spectrum — plot_spectrum","title":"Plot Spectrum — plot_spectrum","text":"Plot spectrum zoom specific region.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Spectrum — plot_spectrum","text":"","code":"plot_spectrum(   x,   ...,   obj = as_v2_obj(x),   foc_frac = get_foc_frac(obj),   foc_rgn = get_foc_rgn(obj, foc_frac),   sub1 = TRUE,   sub2 = FALSE,   sub3 = width(foc_rgn) < width(obj$cs),   mar = NULL,   frame = FALSE,   con_lines = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Spectrum — plot_spectrum","text":"x object type spectrum, decon0, decon1 decon2. details see metabodecon_classes. ... Additional arguments passed draw_spectrum() every sub figure. See 'Details'. obj object type spectrum decon2. Usually auto  generated   x, can set manually case default conversion sufficient. foc_frac numeric vector specifying start end focus region fraction full spectrum width. used foc_rgn set NULL. foc_rgn numeric vector specifying start end focus region ppm.  set NULL, foc_frac used   determine   focus  region.   foc_rgn    set   NULL,   suitable  focus  region    chosen automatically. Takes precedence foc_frac. sub1, sub2, sub3 List arguments passed draw_spectrum() drawing sub figure 1-3. See 'Details'. mar numeric vector length 4 passed, specifies margins plot. Passed par(). set NULL, suitable value chosen automatically. frame list values passed box() drawing frame around plot region. set NULL, frame drawn. con_lines list values passed lines() drawing connecting lines sub figure 1 focus rectangle sub figure 3. See 'Details'. set NULL, connecting lines drawn.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Spectrum — plot_spectrum","text":"NULL. Called side effect plotting sketched 'Details'.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Spectrum — plot_spectrum","text":"function first initializes new plotting canvas.     calls draw_spectrum() multiple times draw following sub figures  onto  plotting canvas: signal intensities focus region second derivative focus region signal intensities datapoints  argument  lists    individual  calls   draw_spectrum()  determined runtime depend arguments passed plot_spectrum() well currently active graphics device. customize  appearance  individual  sub  plots,   can  overwrite   value  passed  draw_spectrum() providing   corresponding  named  element   sub1, sub2 sub3. sketch resulting figure shown .   Note    figure  created   plot_spectrum()  can   part   multi-figure configuration created setting  mfrow   mfcol  via par(). Example:","code":"__________________________________________ |        ______________1_____________      | |       | Sub1: Signal Intensity in  |     | |       | Focus Region               |     | |       |             /\\             |     | |       |            /  \\            |     | |       |           /    \\  /\\       |     | |     11|          /      \\/  \\      |7    | |       |     /\\  /            \\     |     | |       |    /  \\/              \\    |     | |       |   /                    \\   |     | |       |__/___________0__________\\__|     | |       | Sub2: Second Derivative    |     | |     11| in Focus Region            |7    | |       |____________________________|     | |                      3                   | |    __________________3_________________  | |   |  Sub3: Signal Intensity over all   | | |   |  Datapoints     ________________   | | | 5 |                | Focus Rectangle|  |1| |   |     /\\         |       /\\       |  | | |   |    /  \\        |      /  \\/\\    |  | | |   |   /    \\   /\\  |   /\\/      \\   |  | | |   |__/______\\_/__\\_|__/__________\\__|__| | |______________________5___________________| _______________________________________ | Plot Spectrum with   | Other Figure  | | sub3 = TRUE          | Other Figure  | |      ___________     |  ___________  | |     | Sub Fig 1 |    | | x      x  | | |     |___________|    | |      x    | | |     |_Sub_Fig_2_|    | |      x    | | |   _________________  | |   x     x | | |  |    Sub Fig 3    | | |      x    | | |  |_________________| | |___________| | |______________________|_______________| | Some other Figure    | Plot Spectrum | |                      | sub3 = FALSE  | |  _________________   |  ___________  | | |     ___         |  | | Sub Fig 1 | | | | ___/   \\___     |  | |           | | | |/           \\____|  | |___________| | | |                 |  | | Sub Fig 2 | | | |_________________|  | |___________| | |______________________|_______________|"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Spectrum — plot_spectrum","text":"","code":"## 1. Prepare a deconvoluted spectrum as input  spec <- read_spectrum(metabodecon_file(\"sim/sim_01\")) decon <- generate_lorentz_curves_sim(spec)  ## 2.1. Plot the full (non-deconvoluted) spectrum ## 2.2. Remove connecting lines, and focus on a specific region specified in ppm ## 2.3. Show second derivative and focus on a specific region specified as fraction ## 2.4. Change color of focus rectangle and margins of sub figure 1 ## 2.5. Hide xlab and show second derivative ## 2.6. Change the figure region for sub figure 1  plot_spectrum(spec, sub1 = FALSE)  plot_spectrum(decon, foc_rgn = c(3.49, 3.45), con_lines = FALSE)  plot_spectrum(decon, sub2 = TRUE, foc_frac = c(0.40, 0.30))  plot_spectrum(decon,     sub1 = list(mar = c(3, 6, 3, 6), lt_axis = list(col = \"violet\")),     foc_rect = list(border = \"violet\", col = transp(\"violet\")),     con_lines = list(col = \"violet\") )  plot_spectrum(decon,     sub2 = TRUE,     sub3 = list(bt_axis = list(text = \"\")),     frame = TRUE,     con_lines = FALSE )  plot_spectrum(decon, sub1 = list(fig_rgn_npc = c(0,1,.3,1), mar = c(0,5,0,0)))"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"Plots original spectrum superposition generated Lorentz curves saves result png specified filepath. Superseded plot_spectrum() since metabodecon v1.2.0. replaced v2.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"","code":"plot_spectrum_superposition_save_as_png(   deconv_result,   x_range = c(),   y_range = c(),   out_dir = \".\",   ask = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"deconv_result Saved result MetaboDecon1D() function x_range Row vector two entries consisting ppm start ppm end value scale range x-axis (optional) y_range Row vector two entries consisting ppm start ppm end value scale range y-axis (optional) out_dir Path directory png files saved. Default current working directory. ask Logical value. Whether ask confirmation user writing files disk.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"NULL, called side effects.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"Martina Haeckl, 2021.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_spectrum_superposition_save_as_png.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spectrum approx for variable range — plot_spectrum_superposition_save_as_png","text":"","code":"sim <- metabodecon_file(\"bruker/sim_subset\") sim_decon <- generate_lorentz_curves_sim(sim) png_dir <- tmpdir(\"sim_decon/pngs\", create = TRUE) plot_spectrum_superposition_save_as_png(sim_decon, out_dir = png_dir, ask = FALSE) #> Plot superposition of sim_01 #> Plot superposition of sim_02 dir(png_dir, full.names = TRUE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_lorentz_curves.png\"     #> [2] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_sum_lorentz_curves.png\" #> [3] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_lorentz_curves.png\"     #> [4] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_sum_lorentz_curves.png\""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot peak triplets for variable range — plot_triplets","title":"Plot peak triplets for variable range — plot_triplets","text":"Plots peak triplets peak detected MetaboDecon1D() stores plots png outdir. Superseded plot_spectrum() since metabodecon v1.2.0. replaced v2.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot peak triplets for variable range — plot_triplets","text":"","code":"plot_triplets(   deconv_result,   x_range = c(),   y_range = c(),   out_dir = \".\",   ask = TRUE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot peak triplets for variable range — plot_triplets","text":"deconv_result Saved result MetaboDecon1D() function x_range Row vector two entries consisting ppm start ppm end value scale range x-axis (optional) y_range Row vector two entries consisting ppm start ppm end value scale range y-axis (optional) out_dir Directory save png files (optional) ask Logical value ask user png files saved specified directory (optional)","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot peak triplets for variable range — plot_triplets","text":"return value, called side effect plotting.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot peak triplets for variable range — plot_triplets","text":"Martina Haeckl, 2021: Initial version. Tobias Schmidt, 2024: Minor updates pass CRAN checks.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/plot_triplets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot peak triplets for variable range — plot_triplets","text":"","code":"sim <- metabodecon_file(\"bruker/sim_subset\") sim_decon <- generate_lorentz_curves_sim(sim) png_dir <- tmpdir(\"sim_decon/pngs\", create = TRUE) plot_triplets(sim_decon, out_dir = png_dir, ask = FALSE) #> Plot triplets of sim_01 #> Plot triplets of sim_02 dir(png_dir, full.names = TRUE) #> [1] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_lorentz_curves.png\"     #> [2] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_peak_triplets.png\"      #> [3] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_01_sum_lorentz_curves.png\" #> [4] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_lorentz_curves.png\"     #> [5] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_peak_triplets.png\"      #> [6] \"/tmp/RtmpZmBgKX/metabodecon/sim_decon/pngs/sim_02_sum_lorentz_curves.png\""},{"path":"https://spang-lab.github.io/metabodecon/reference/print_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Methods for Printing Metabodecon Objects — print_methods","title":"S3 Methods for Printing Metabodecon Objects — print_methods","text":"S3 Methods printing metabodecon objects described  Metabodecon Classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/print_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Methods for Printing Metabodecon Objects — print_methods","text":"","code":"# S3 method for class 'spectrum' print(x, name = FALSE, ...)  # S3 method for class 'ispec' print(x, name = FALSE, ...)  # S3 method for class 'idecon' print(x, name = FALSE, ...)  # S3 method for class 'decon1' print(x, name = FALSE, ...)  # S3 method for class 'decon2' print(x, name = FALSE, ...)  # S3 method for class 'align' print(x, name = FALSE, ...)  # S3 method for class 'spectra' print(x, ...)  # S3 method for class 'ispecs' print(x, ...)  # S3 method for class 'idecons' print(x, ...)  # S3 method for class 'decons1' print(x, ...)  # S3 method for class 'decons2' print(x, ...)  # S3 method for class 'aligns' print(x, ...)"},{"path":"https://spang-lab.github.io/metabodecon/reference/print_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Methods for Printing Metabodecon Objects — print_methods","text":"x object print. name Logical. TRUE, name object printed object. ... used. accepted comply generic base::print().","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/print_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Methods for Printing Metabodecon Objects — print_methods","text":"","code":"si <- c(1, 1, 3, 7, 8, 3, 8, 5, 2, 1) cs_max <- 14.8 cs_width <- 20.0 fq_ref <- 600.25 * 1e6 fq_width <- 12005 spectrum <- read_spectrum() print(spectrum) #> spectrum object (2048 dp, 3.6 to 3.3 ppm)"},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more spectra from Disk — read_spectra","title":"Read one or more spectra from Disk — read_spectra","text":"read_spectrum() reads single spectrum disk returns spectrum object. read_spectra() can used read multiple spectra returns spectra object.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more spectra from Disk — read_spectra","text":"","code":"read_spectra(   data_path = pkg_file(\"example_datasets/bruker/urine\"),   file_format = \"bruker\",   expno = 10,   procno = 10,   raw = FALSE,   silent = TRUE,   force = FALSE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more spectra from Disk — read_spectra","text":"data_path path file/folder containing spectrum data. E.g. \"example_datasets/jcampdx/urine/urine_1.dx\" \"example_datasets/bruker/urine/urine\". file_format file_format spectrum file. E.g. \"bruker\" \"jcampdx\". expno, procno experiment/processing number file. E.g. \"10\". relevant file_format equals \"bruker\". details see section File Structure metabodecon FAQ. raw FALSE, scales returned signal intensities based information available spectrum metadata, particular NC_proc. details see processing-reference.pdf, available https://www.bruker.com/en.html section 'Services & Support > Documentation & Manuals > Magnetic Resonance > Acquisition & Processing > TopSpin Processing Commands Parameters' (requires login). silent TRUE, output printed console. force TRUE, try continue encountering errors print info messages instead. hide messages well, set silent = TRUE.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one or more spectra from Disk — read_spectra","text":"spectrum object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more spectra from Disk — read_spectra","text":"","code":"relpath <- \"example_datasets/bruker/urine\" urine <- system.file(relpath, package = \"metabodecon\") urine_1 <- file.path(urine, \"urine_1\") urine_2 <- file.path(urine, \"urine_2\") x1 <- read_spectrum(urine_1) x2 <- read_spectrum(urine_2) xx <- read_spectra(urine) str(xx) #> List of 2 #>  $ urine_1:List of 3 #>   ..$ si  : num [1:131072] 316.2 250.8 26.2 -234.2 -265.5 ... #>   ..$ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>   ..$ meta:List of 6 #>   .. ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   .. ..$ name  : chr \"urine_1\" #>   .. ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_1\" #>   .. ..$ type  : NULL #>   .. ..$ simpar: NULL #>   .. ..$ mfs   : NULL #>   ..- attr(*, \"class\")= chr \"spectrum\" #>  $ urine_2:List of 3 #>   ..$ si  : num [1:131072] -1544 -1464 -1416 -1436 -1398 ... #>   ..$ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>   ..$ meta:List of 6 #>   .. ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   .. ..$ name  : chr \"urine_2\" #>   .. ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_2\" #>   .. ..$ type  : NULL #>   .. ..$ simpar: NULL #>   .. ..$ mfs   : NULL #>   ..- attr(*, \"class\")= chr \"spectrum\" #>  - attr(*, \"class\")= chr \"spectra\" str(x1) #> List of 3 #>  $ si  : num [1:131072] 316.2 250.8 26.2 -234.2 -265.5 ... #>  $ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>  $ meta:List of 6 #>   ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   ..$ name  : chr \"urine_1\" #>   ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_1\" #>   ..$ type  : NULL #>   ..$ simpar: NULL #>   ..$ mfs   : NULL #>  - attr(*, \"class\")= chr \"spectrum\" stopifnot(all.equal(x1, xx$urine_1))  ## Below code shows how a spectrum stored in JCAMP-DX format can be read. ## Reading files in this format is very slow (about 30s on the development ## machine). So if possible, you should stick with the original Bruker ## data storage format. if (FALSE) { # \\dontrun{ relpath <- \"example_datasets/jcampdx/urine/urine_1.dx\" urine_1_dx <- system.file(relpath, package = \"metabodecon\") x1_dx <- read_spectrum(urine_1_dx, file_format = \"jcampdx\") stopifnot(all.equal(x1, x1_dx)) } # }"},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more spectra from Disk — read_spectrum","title":"Read one or more spectra from Disk — read_spectrum","text":"read_spectrum() reads single spectrum disk returns spectrum object. read_spectra() can used read multiple spectra returns spectra object.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more spectra from Disk — read_spectrum","text":"","code":"read_spectrum(   data_path = metabodecon_file(\"bruker/sim/sim_01\"),   file_format = \"bruker\",   expno = 10,   procno = 10,   raw = FALSE,   silent = TRUE,   force = FALSE )"},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more spectra from Disk — read_spectrum","text":"data_path path file/folder containing spectrum data. E.g. \"example_datasets/jcampdx/urine/urine_1.dx\" \"example_datasets/bruker/urine/urine\". file_format file_format spectrum file. E.g. \"bruker\" \"jcampdx\". expno, procno experiment/processing number file. E.g. \"10\". relevant file_format equals \"bruker\". details see section File Structure metabodecon FAQ. raw FALSE, scales returned signal intensities based information available spectrum metadata, particular NC_proc. details see processing-reference.pdf, available https://www.bruker.com/en.html section 'Services & Support > Documentation & Manuals > Magnetic Resonance > Acquisition & Processing > TopSpin Processing Commands Parameters' (requires login). silent TRUE, output printed console. force TRUE, try continue encountering errors print info messages instead. hide messages well, set silent = TRUE.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one or more spectra from Disk — read_spectrum","text":"spectrum object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/read_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more spectra from Disk — read_spectrum","text":"","code":"relpath <- \"example_datasets/bruker/urine\" urine <- system.file(relpath, package = \"metabodecon\") urine_1 <- file.path(urine, \"urine_1\") urine_2 <- file.path(urine, \"urine_2\") x1 <- read_spectrum(urine_1) x2 <- read_spectrum(urine_2) xx <- read_spectra(urine) str(xx) #> List of 2 #>  $ urine_1:List of 3 #>   ..$ si  : num [1:131072] 316.2 250.8 26.2 -234.2 -265.5 ... #>   ..$ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>   ..$ meta:List of 6 #>   .. ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   .. ..$ name  : chr \"urine_1\" #>   .. ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_1\" #>   .. ..$ type  : NULL #>   .. ..$ simpar: NULL #>   .. ..$ mfs   : NULL #>   ..- attr(*, \"class\")= chr \"spectrum\" #>  $ urine_2:List of 3 #>   ..$ si  : num [1:131072] -1544 -1464 -1416 -1436 -1398 ... #>   ..$ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>   ..$ meta:List of 6 #>   .. ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   .. ..$ name  : chr \"urine_2\" #>   .. ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_2\" #>   .. ..$ type  : NULL #>   .. ..$ simpar: NULL #>   .. ..$ mfs   : NULL #>   ..- attr(*, \"class\")= chr \"spectrum\" #>  - attr(*, \"class\")= chr \"spectra\" str(x1) #> List of 3 #>  $ si  : num [1:131072] 316.2 250.8 26.2 -234.2 -265.5 ... #>  $ cs  : num [1:131072] 14.8 14.8 14.8 14.8 14.8 ... #>  $ meta:List of 6 #>   ..$ fq    : num [1:131072] 6e+08 6e+08 6e+08 6e+08 6e+08 ... #>   ..$ name  : chr \"urine_1\" #>   ..$ path  : chr \"/home/runner/work/_temp/Library/metabodecon/example_datasets/bruker/urine/urine_1\" #>   ..$ type  : NULL #>   ..$ simpar: NULL #>   ..$ mfs   : NULL #>  - attr(*, \"class\")= chr \"spectrum\" stopifnot(all.equal(x1, xx$urine_1))  ## Below code shows how a spectrum stored in JCAMP-DX format can be read. ## Reading files in this format is very slow (about 30s on the development ## machine). So if possible, you should stick with the original Bruker ## data storage format. if (FALSE) { # \\dontrun{ relpath <- \"example_datasets/jcampdx/urine/urine_1.dx\" urine_1_dx <- system.file(relpath, package = \"metabodecon\") x1_dx <- read_spectrum(urine_1_dx, file_format = \"jcampdx\") stopifnot(all.equal(x1, x1_dx)) } # }"},{"path":"https://spang-lab.github.io/metabodecon/reference/sap.html","id":null,"dir":"Reference","previous_headings":"","what":"The SAP Dataset — sap","title":"The SAP Dataset — sap","text":"SAP Dataset consists single 'Simple--Possible' (SAP) spectrum. purpose SAP spectrum provide straightforward example can used test understand deconvolution algorithm detail.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/sap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The SAP Dataset — sap","text":"","code":"sap"},{"path":"https://spang-lab.github.io/metabodecon/reference/sap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The SAP Dataset — sap","text":"object class spectra length 1.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/sap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The SAP Dataset — sap","text":"first () spectrum within SAP dataset contains 128 datapoints ranging -6.4 6.4 ppm four peaks. rough sketch spectrum shown :","code":"-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~ |      SFR      |               w               |     SFR      | |               |  x           www       p      |              | |~-~-~-~-~-~-~-~|~-|-|-~-~-~-~-~|~-~-~-~-|-~-~-~-~-~-~-~-~-~-~-~ |               |  | |          |        |      | 6.4             |  | 2.24       0.047    -2.22  -3.2                 |  2.61                 3.2"},{"path":"https://spang-lab.github.io/metabodecon/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"The Sim Dataset — sim","title":"The Sim Dataset — sim","text":"simulated dataset generated Blood dataset.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Sim Dataset — sim","text":"","code":"sim"},{"path":"https://spang-lab.github.io/metabodecon/reference/sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The Sim Dataset — sim","text":"spectra object consisting 16 spectrum objects, spectrum contains 2048 datapoints ranging 3.60 3.29 ppm. details spectrum spectra objects see metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/simulate_spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a 1D NMR Spectrum — simulate_spectrum","title":"Simulate a 1D NMR Spectrum — simulate_spectrum","text":"Simulates 1D NMR spectrum based provided parameters.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/simulate_spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a 1D NMR Spectrum — simulate_spectrum","text":"","code":"simulate_spectrum(   name = \"sim_00\",   seed = sum(utf8ToInt(name)),   ndp = 2048,   npk = 10,   csres = 0.00015,   cs = seq(from = 3.6, length.out = ndp, by = -csres),   pkr = quantile(cs, c(0.25, 0.75)),   fqref = 600252806.95,   x0 = sort(runif(npk, pkr[1], pkr[2])),   A = runif(npk, 2.5, 20) * 1000,   lambda = runif(npk, 0.9, 1.3)/1000,   noise = rnorm(length(cs), sd = 1200) )"},{"path":"https://spang-lab.github.io/metabodecon/reference/simulate_spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a 1D NMR Spectrum — simulate_spectrum","text":"name name spectrum. seed seed random number generator. ndp number data points spectrum. npk number peaks spectrum. csres chemical shift resolution PPM. cs vector chemical shifts PPM. pkr start stop peak region PPM. fqref reference frequency Hz. x0 peak center positions PPM. peak area parameter. lambda peak width parameter. noise noise add spectrum.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/simulate_spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a 1D NMR Spectrum — simulate_spectrum","text":"spectrum object described metabodecon_classes.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/simulate_spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a 1D NMR Spectrum — simulate_spectrum","text":"","code":"simA <- simulate_spectrum(\"simA\") simA_copy <- simulate_spectrum(\"simA\") simB <- simulate_spectrum(\"simB\") simC <- simulate_spectrum(\"simC\", npk = 20) plot_spectrum(simC)  if (!identical(simA, simA_copy)) stop() if ( identical(simA, simB     )) stop()"},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Signals using 'speaq' — speaq_align","title":"Align Signals using 'speaq' — speaq_align","text":"Performs signal alignment across individual spectra using 'speaq' package (Beirnaert C, Meysman P, Vu TN, Hermans N, Apers S, Pieters L, et al. (2018) speaq 2.0: complete workflow high-throughput 1D NMRspectra processing quantification. PLoS Comput Biol 14(3): e1006018. https://www.doi.org/10.1371/journal.pcbi.1006018). spectra deconvolution process yields signals spectra. Due slight changes measurement conditions, e.g. pH variations, signal positions may vary slightly across spectra. consequence, prior analysis signals belonging compound aligned across spectra. purpose 'speaq' package.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Signals using 'speaq' — speaq_align","text":"","code":"speaq_align(   feat = gen_feat_mat(spectrum_data),   maxShift = 50,   spectrum_data = generate_lorentz_curves_sim(),   si_size_real_spectrum = length(spectrum_data[[1]]$y_values),   verbose = TRUE,   show = FALSE,   mfrow = c(2, 1) )"},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Signals using 'speaq' — speaq_align","text":"feat Output gen_feat_mat(). maxShift Maximum number points along \"ppm-axis\" value can moved speaq package e.g. 50. 50 suitable starting value plasma spectra digital resolution 128K. Note parameter individually optimized depending type analyzed spectra digital resolution. urine prone chemical shift variations value probably increased. spectrum_data Output generate_lorentz_curves(). si_size_real_spectrum Number real data points original spectra. verbose Whether print additional information alignment process. show Whether plot original aligned spectra. mfrow Layout use plot. Passed par(). Use mfrow = NULL plot layout changed.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Signals using 'speaq' — speaq_align","text":"matrix containing integral values spectra alignment. one row per spectrum one column per ppm value. entry position , j holds integral value signal spectrum center position j alignment speaq. signal center j spectrum , entry , j set NA. column names matrix ppm values original spectra. Example return matrix:","code":"...  3.59  3.55  3.57  3.56  3.55  3.54  3.53   .----------------------------------------------> PPM 1 | NA   NA    0.20  NA    NA    NA    0.25  NA 2 | NA   NA    0.15  NA    NA    NA    0.13  NA 3 | NA   NA    NA    0.2   NA    NA    0.18  NA SpNr"},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Align Signals using 'speaq' — speaq_align","text":"Initial version Wolfram Gronwald. Refactored Tobias Schmidt 2024.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/speaq_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align Signals using 'speaq' — speaq_align","text":"","code":"sim_subset <- metabodecon_file(\"bruker/sim_subset\") spectrum_data <- generate_lorentz_curves_sim(sim_subset) feat <- gen_feat_mat(spectrum_data) maxShift <- 200 M <- speaq_align(feat, maxShift, spectrum_data, show = TRUE) #>  #>  -------------------------------- #>  dohCluster will run with maxShift= 200 #>  If you want dohCluster to detect the optimal maxShift automatically, #>  use dohCluster(..., maxShift = NULL, ...) #>  -------------------------------- #>  #>  aligning spectrum  1 #>  Median pearson correlation of aligned spectra: 0.9977223 #>  Alignment time:  3e-04  minutes  str(M) #>  num [1:2, 1:2048] NA NA NA NA NA NA NA NA NA NA ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : NULL #>   ..$ : chr [1:2048] \"3.59\" \"3.58985\" \"3.5897\" \"3.58955\" ..."},{"path":"https://spang-lab.github.io/metabodecon/reference/tmpdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporary Session Directory — tmpdir","title":"Temporary Session Directory — tmpdir","text":"Returns path metabodecon's temporary session directory. directory equals subdirectory 'metabodecon' R's temporary session directory base::tempdir() plus additional path normalization.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/tmpdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporary Session Directory — tmpdir","text":"","code":"tmpdir(subdir = NULL, create = FALSE)"},{"path":"https://spang-lab.github.io/metabodecon/reference/tmpdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporary Session Directory — tmpdir","text":"subdir Optional subdirectory within temporary session directory. create Whether create directory yet exist.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/tmpdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporary Session Directory — tmpdir","text":"Returns path temporary session directory.","code":""},{"path":[]},{"path":"https://spang-lab.github.io/metabodecon/reference/tmpdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporary Session Directory — tmpdir","text":"","code":"tmpdir() #> [1] \"/tmp/RtmpZmBgKX/metabodecon\" tmpdir(\"simulate_spectra\") #> [1] \"/tmp/RtmpZmBgKX/metabodecon/simulate_spectra\""},{"path":"https://spang-lab.github.io/metabodecon/reference/transp.html","id":null,"dir":"Reference","previous_headings":"","what":"Make transparent — transp","title":"Make transparent — transp","text":"Make color transparent adding alpha channel.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/transp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make transparent — transp","text":"","code":"transp(col = \"violet\", alpha = 0.08)"},{"path":"https://spang-lab.github.io/metabodecon/reference/transp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make transparent — transp","text":"col Character string specifying color make transparent. alpha Numeric value 0 1 specifying transparency level.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/transp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make transparent — transp","text":"character string representing color alpha channel.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/transp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make transparent — transp","text":"","code":"transp(\"violet\", 0.08) #> [1] \"#EE82EE14\" transp(\"black\", 0.5) #> [1] \"#00000080\""},{"path":"https://spang-lab.github.io/metabodecon/reference/tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Structure of a Directory Tree — tree","title":"Print the Structure of a Directory Tree — tree","text":"Prints structure directory tree specified maximum level depth. lists files directories specified path, displaying tree-like structure.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Structure of a Directory Tree — tree","text":"","code":"tree(path, max.level = 2, level = 0, prefix = \"\")"},{"path":"https://spang-lab.github.io/metabodecon/reference/tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Structure of a Directory Tree — tree","text":"path root path start listing directory structure. max.level maximum depth directories list. level Internal parameter used recursion, indicating current level depth. prefix Internal parameter used formatting printed tree structure.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Structure of a Directory Tree — tree","text":"NULL, called side effect printing directory structure.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the Structure of a Directory Tree — tree","text":"","code":"metabodecon_dir <- system.file(package = \"metabodecon\") tree(metabodecon_dir, max.level = 1) #> /home/runner/work/_temp/Library/metabodecon #> ├── DESCRIPTION #> ├── INDEX #> ├── Meta/ #> ├── NAMESPACE #> ├── NEWS.md #> ├── R/ #> ├── WORDLIST #> ├── data/ #> ├── example_datasets/ #> ├── help/ #> └── html/"},{"path":"https://spang-lab.github.io/metabodecon/reference/width.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Width of a Numeric Vector — width","title":"Calculate the Width of a Numeric Vector — width","text":"Calculates width numeric vector computing difference maximum minimum values vector.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Width of a Numeric Vector — width","text":"","code":"width(x)"},{"path":"https://spang-lab.github.io/metabodecon/reference/width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Width of a Numeric Vector — width","text":"x numeric vector.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Width of a Numeric Vector — width","text":"width vector, calculated difference maximum minimum values.","code":""},{"path":"https://spang-lab.github.io/metabodecon/reference/width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Width of a Numeric Vector — width","text":"","code":"vec <- c(1, 3, 5, 7, 9) width(vec) #> [1] 8"},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-120","dir":"Changelog","previous_headings":"","what":"metabodecon 1.2.0","title":"metabodecon 1.2.0","text":"Finished following tasks. details task, see TODOS.md. CRAN-0: Omit “Functions ” title CRAN-1: Omit “Functions ” DESCRIPTION CRAN-2: Explain acronyms like NMR CRAN-3: Use correct reference format DESCRIPTION CRAN-4: Explain return value function docs CRAN-5: Remove examples unexported functions CRAN-6: Fix vignettes CRAN-7: Check dontrun examples CRAN-8: Functions write disk default CRAN-9: Functions change working dir global options FEATURE-01: Use temp dirs example data FEATURE-02: Add minimal example dataset FEATURE-03: Batch Mode FEATURE-04: Parallelize FEATURE-05: Add test suite FEATURE-06: Return lambda hertz FEATURE-07: Improve return value FEATURE-09 Implement read_spectra() FEATURE-11: Accept dataframes GLC FEATURE-14: Provide simulated datasets FEATURE-15: Add lifecycle badges FEATURE-16: Improve multiprocessing FEATURE-17: Discard output FEATURE-18: Implement plot_spectrum() FEATURE-20: Implement deconvolute_blood() FIX-1: Prevent crashes high smoothing REFACTOR-01: Combine load_spectrum functions REFACTOR-02: Improve Text Output (-License, +Timestamps) REFACTOR-04: Plotting speed REFACTOR-05: Speedup smoothing REFACTOR-06: Use single unit source truth REFACTOR-07: Split monolithic functions smaller parts REFACTOR-08: Improve docs Metabodecon1D return value REFACTOR-09: Replace glc generate_lorentz_curves() REFACTOR-10: Replace md1d MetaboDecon1D() calls REFACTOR-11: Implement calc_prarp() REFACTOR-12: Write compliance tests REFACTOR-13: Write PRARP tests","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-111","dir":"Changelog","previous_headings":"","what":"metabodecon 1.1.1","title":"metabodecon 1.1.1","text":"API: Fixed bug generate_lorentz_curves() caused function always use file format “bruker”, even file format “jcampdx” specified. Datasets: Fixed filenames samples blood dataset (renamed Bood_<nr> blood_<nr>). Renamed example_datasets/jcampdx/urine/urine.dx example_datasets/jcampdx/urine/urine_1.dx renamed example_datasets/bruker/urine/urine/ example_datasets/bruker/urine/urine_1/. done list.files seems return different orderings urine.dx urine_2.dx different operating systems, whereas urine_1.dx urine_2.dx sorted way everywhere. makes easier write clear concise test cases, don’t need check file ordering. Documentation: Fixed broken image vignettes/FAQ.Rmd. Testing: Added unit tests generate_lorentz_curves(). Enabled parallel processing unit tests. Created initial versions tests/testthat/test-generate_lorentz_curves-[1-4].R. Added generate_lorentz_curves_v2() DESCRIPTION/Config/testthat/start-first. Adjusted existing tests use updated version example_datasets (sample urine renamed urine_1, mentioned section Datasets) Internal: Added functions %||%, msg() msgf R/util.R. Added elements range_water_signal_ppm signal_free_region returned list function deconvolute_spectrum. Function now prints error messages stderr even message stream redirected. Copied function deconvolution() R/MetaboDecon1D.R R/main_v2.R .deconvolute_spectrum. Fixed order params deconvolution. Fixed download_example_datasets(). Argument overwrite passed correctly cache_example_datasets(). Changed URL example datasets xds$url https://github.com/spang-lab/metabodecon/releases/download/v1.0.2/example_datasets.zip https://github.com/spang-lab/metabodecon/releases/download/v1.1.0/example_datasets.zip. Improved cache_example_datasets(). Extraction now done extract == TRUE resulting folder yet exist (saves approx. 2-3s call). overwrite possible existing folder, argument overwrite can set TRUE. Fixed formatting test_helpers.R Added linter config .lintr","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-110","dir":"Changelog","previous_headings":"","what":"metabodecon 1.1.0","title":"metabodecon 1.1.0","text":"API: Improved function download_example_datasets() adding caching making stable Replaced function get_data_dir() datadir() helper functions datadir_persistent(), datadir_temp() tempdir Function get_data_dir() now deprecated favour datadir() Documentation: Added question file structure vignettes/FAQ.Rmd Created categories function reference _pkgdown.yml Datasets: Moved misc/datasets misc/example_datasets Moved misc/examples/usage_example.R misc/code_examples/sage_example.R Internal: Added unit tests Removed script check_package.R Moved functions util.R datadir.R Added grDevices, stats utils internal imports Added lots test helper functions R/test_helpers.R Added function generate_lorentz_curves_v2() replace generate_lorentz_curves() soon new features 100% backwards compatibility Fixed bug () caused get_datadir_mock() called redirection took place causing unexpected message output Fixed bug datadir() caused resulting path end slash Unix-like systems without slash Windows, file specified RUN_SLOW_TESTS now set TRUE CI pipeline","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-103","dir":"Changelog","previous_headings":"","what":"metabodecon 1.0.3","title":"metabodecon 1.0.3","text":"API: Updated get_data_dir() accept \"blood\" new value parameter dataset_name Updated download_example_datasets() download datasets github repo instead old spang-lab repo Documentation: Removed table contents README.md ’s bit overkill approx. 50 lines text Improved documentation Internal: Switched MIT License GPL-3 match license predecessor package MetaboDecon1D Added docs folder .gitignore. Reason: changed vignettes pkgdown articles displayed Github Pages website can regenerated folder vignettes upon deployment. Created TODOS.md added .Rbuildignore Improved .gitignore","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-102","dir":"Changelog","previous_headings":"","what":"metabodecon 1.0.2","title":"metabodecon 1.0.2","text":"Minor URL spelling adjustments pass CRAN checks","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-101","dir":"Changelog","previous_headings":"","what":"metabodecon 1.0.1","title":"metabodecon 1.0.1","text":"Fixed spelling errors. Removed unused CONTRIBUTE.md (instead section within README.md used)","code":""},{"path":"https://spang-lab.github.io/metabodecon/news/index.html","id":"metabodecon-100","dir":"Changelog","previous_headings":"","what":"metabodecon 1.0.0","title":"metabodecon 1.0.0","text":"Initial CRAN submission.","code":""}]
