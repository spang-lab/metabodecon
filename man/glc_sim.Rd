% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/30_generate_lorentz_curves.R
\name{glc_sim}
\alias{glc_sim}
\title{Deconvolute the Sim Dataset}
\usage{
glc_sim(
  name = "bruker/sim_subset",
  spectra = NULL,
  ask = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{name}{Name of the spectra to deconvolute. Use \code{'bruker/sim'} to deconvolute all spectra of the Sim dataset. Use \code{'bruker/sim_subset'} to deconvolute only the first two spectra of the Sim dataset. Use \code{'bruker/sim/sim_xx'}, with \code{xx} being a number between \code{01} and \code{16}, to deconvolute a single spectrum of the Sim dataset. The provided name is passed to \code{metabodecon_file()} to get the path to the spectra.}

\item{spectra}{List of spectra or path to spectra directory. If \code{NULL}, the spectra are read from the path obtained by passing \code{name} to \code{metabodecon_file()}.}

\item{ask}{Whether to ask for user input during the deconvolution process.}

\item{verbose}{Whether to print log messages during the deconvolution process.}
}
\value{
A list representing the deconvoluted spectra. For details see the return value of \code{generate_lorentz_curves()}.
}
\description{
The simulated 'Sim' dataset is much smaller than real NMR spectra (1309 datapoints instead of 131072) and lacks a water signal. This makes it ideal for use in examples or as a default value for functions. However, the default values for \code{sfr}, \code{wshw}, and \code{delta} in the \code{generate_lorentz_curves()} function are not optimal for this dataset. To avoid repeatedly defining the optimal parameters in examples, this function is provided to deconvolute the "Sim" dataset with suitable parameters. The actual parameters used for the deconvolution can be found in the 'Examples' section.
}
\examples{
# Detailed version:
name = "bruker/sim_subset"
path <- metabodecon_file(name)
decons1 <- generate_lorentz_curves(
    data_path = path,    # Path to directory containing spectra
    sfr = c(3.42, 3.58), # Borders of signal free region (SFR) in ppm
    wshw = 0,            # Half width of water signal (WS) in ppm
    delta = 0.1,         # Threshold for peak filtering
    ask = FALSE,         # Don't ask for user input
    verbose = FALSE      # Suppress status messages
)

# Short version with `glc_sim()`:
decons2 <- glc_sim("bruker/sim_subset")

# Comparison of results:
all.equal(decons1, decons2)
}
